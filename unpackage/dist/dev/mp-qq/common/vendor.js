(global["webpackJsonp"]=global["webpackJsonp"]||[]).push([["common/vendor"],{1:
/*!********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-mp-qq/dist/index.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createApp=bt,t.createComponent=$t,t.createPage=Tt,t.default=void 0;var r=o(n(/*! vue */2));function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){return f(e)||u(e,t)||h(e,t)||c()}function c(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function u(e,t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done);r=!0)if(n.push(s.value),t&&n.length===t)break}catch(c){o=!0,i=c}finally{try{r||null==a["return"]||a["return"]()}finally{if(o)throw i}}return n}}function f(e){if(Array.isArray(e))return e}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e){return y(e)||v(e)||h(e)||d()}function d(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function h(e,t){if(e){if("string"===typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?m(e,t):void 0}}function v(e){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}function y(e){if(Array.isArray(e))return m(e)}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var g=Object.prototype.toString,_=Object.prototype.hasOwnProperty;function b(e){return"function"===typeof e}function w(e){return"string"===typeof e}function x(e){return"[object Object]"===g.call(e)}function O(e,t){return _.call(e,t)}function A(){}function S(e){var t=Object.create(null);return function(n){var r=t[n];return r||(t[n]=e(n))}}var k=/-(\w)/g,E=S((function(e){return e.replace(k,(function(e,t){return t?t.toUpperCase():""}))})),T=["invoke","success","fail","complete","returnValue"],$={},P={};function j(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?I(n):n}function I(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}function C(e,t){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}function D(e,t){Object.keys(t).forEach((function(n){-1!==T.indexOf(n)&&b(t[n])&&(e[n]=j(e[n],t[n]))}))}function N(e,t){e&&t&&Object.keys(t).forEach((function(n){-1!==T.indexOf(n)&&b(t[n])&&C(e[n],t[n])}))}function M(e,t){"string"===typeof e&&x(t)?D(P[e]||(P[e]={}),t):x(e)&&D($,e)}function R(e,t){"string"===typeof e?x(t)?N(P[e],t):delete P[e]:x(e)&&N($,e)}function U(e){return function(t){return e(t)||t}}function L(e){return!!e&&("object"===typeof e||"function"===typeof e)&&"function"===typeof e.then}function q(e,t){for(var n=!1,r=0;r<e.length;r++){var o=e[r];if(n)n=Promise.then(U(o));else{var i=o(t);if(L(i)&&(n=Promise.resolve(i)),!1===i)return{then:function(){}}}}return n||{then:function(e){return e(t)}}}function F(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return["success","fail","complete"].forEach((function(n){if(Array.isArray(e[n])){var r=t[n];t[n]=function(t){q(e[n],t).then((function(e){return b(r)&&r(e)||e}))}}})),t}function K(e,t){var n=[];Array.isArray($.returnValue)&&n.push.apply(n,p($.returnValue));var r=P[e];return r&&Array.isArray(r.returnValue)&&n.push.apply(n,p(r.returnValue)),n.forEach((function(e){t=e(t)||t})),t}function V(e){var t=Object.create(null);Object.keys($).forEach((function(e){"returnValue"!==e&&(t[e]=$[e].slice())}));var n=P[e];return n&&Object.keys(n).forEach((function(e){"returnValue"!==e&&(t[e]=(t[e]||[]).concat(n[e]))})),t}function B(e,t,n){for(var r=arguments.length,o=new Array(r>3?r-3:0),i=3;i<r;i++)o[i-3]=arguments[i];var s=V(e);if(s&&Object.keys(s).length){if(Array.isArray(s.invoke)){var a=q(s.invoke,n);return a.then((function(e){return t.apply(void 0,[F(s,e)].concat(o))}))}return t.apply(void 0,[F(s,n)].concat(o))}return t.apply(void 0,[n].concat(o))}var H={returnValue:function(e){return L(e)?e.then((function(e){return e[1]})).catch((function(e){return e[0]})):e}},G=/^\$|sendNativeEvent|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/,Y=/^create|Manager$/,z=["createBLEConnection"],W=["createBLEConnection"],J=/^on|^off/;function X(e){return Y.test(e)&&-1===z.indexOf(e)}function Q(e){return G.test(e)&&-1===W.indexOf(e)}function Z(e){return J.test(e)&&"onPush"!==e}function ee(e){return e.then((function(e){return[null,e]})).catch((function(e){return[e]}))}function te(e){return!(X(e)||Q(e)||Z(e))}function ne(e,t){return te(e)?function(){for(var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length,o=new Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return b(n.success)||b(n.fail)||b(n.complete)?K(e,B.apply(void 0,[e,t,n].concat(o))):K(e,ee(new Promise((function(r,i){B.apply(void 0,[e,t,Object.assign({},n,{success:r,fail:i})].concat(o))}))))}:t}Promise.prototype.finally||(Promise.prototype.finally=function(e){var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){throw n}))}))});var re=1e-4,oe=750,ie=!1,se=0,ae=0;function ce(){var e=wx.getSystemInfoSync(),t=e.platform,n=e.pixelRatio,r=e.windowWidth;se=r,ae=n,ie="ios"===t}function ue(e,t){if(0===se&&ce(),e=Number(e),0===e)return 0;var n=e/oe*(t||se);return n<0&&(n=-n),n=Math.floor(n+re),0===n&&(n=1!==ae&&ie?.5:1),e<0?-n:n}var fe={promiseInterceptor:H},le=Object.freeze({__proto__:null,upx2px:ue,addInterceptor:M,removeInterceptor:R,interceptors:fe}),pe={args:function(e){var t=parseInt(e.current);if(!isNaN(t)){var n=e.urls;if(Array.isArray(n)){var r=n.length;if(r)return t<0?t=0:t>=r&&(t=r-1),t>0?(e.current=n[t],e.urls=n.filter((function(e,r){return!(r<t)||e!==n[t]}))):e.current=n[0],{indicator:!1,loop:!1}}}}},de={previewImage:pe},he=["preloadPage","unPreloadPage","loadSubPackage"],ve=["scanCode","startAccelerometer","stopAccelerometer","onAccelerometerChange","startCompass","onCompassChange","setScreenBrightness","getScreenBrightness","setKeepScreenOn","onUserCaptureScreen","vibrateLong","vibrateShort","createWorker","connectSocket","onSocketOpen","onSocketError","sendSocketMessage","onSocketMessage","closeSocket","onSocketClose","openDocument","updateShareMenu","getShareInfo","createLivePlayerContext","createLivePusherContext","setNavigationBarColor","onMemoryWarning","onNetworkStatusChange","reportMonitor","getLogManager","reportAnalytics"],ye=["success","fail","cancel","complete"];function me(e,t,n){return function(r){return t(_e(e,r,n))}}function ge(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(x(t)){var i=!0===o?t:{};for(var s in b(n)&&(n=n(t,i)||{}),t)if(O(n,s)){var a=n[s];b(a)&&(a=a(t[s],t,i)),a?w(a)?i[a]=t[s]:x(a)&&(i[a.name?a.name:s]=a.value):console.warn("QQ小程序 ".concat(e,"暂不支持").concat(s))}else-1!==ye.indexOf(s)?i[s]=me(e,t[s],r):o||(i[s]=t[s]);return i}return b(t)&&(t=me(e,t,r)),t}function _e(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return b(de.returnValue)&&(t=de.returnValue(e,t)),ge(e,t,n,{},r)}function be(e,t){if(O(de,e)){var n=de[e];return n?function(t,r){var o=n;b(n)&&(o=n(t)),t=ge(e,t,o.args,o.returnValue);var i=[t];"undefined"!==typeof r&&i.push(r);var s=wx[o.name||e].apply(wx,i);return Q(e)?_e(e,s,o.returnValue,X(e)):s}:function(){console.error("QQ小程序 暂不支持".concat(e))}}return t}var we=Object.create(null),xe=["onTabBarMidButtonTap","subscribePush","unsubscribePush","onPush","offPush","share"];function Oe(e){return function(t){var n=t.fail,r=t.complete,o={errMsg:"".concat(e,":fail:暂不支持 ").concat(e," 方法")};b(n)&&n(o),b(r)&&r(o)}}xe.forEach((function(e){we[e]=Oe(e)}));var Ae={oauth:["qq"],share:["qq"],payment:["qqpay"],push:["qq"]};function Se(e){var t=e.service,n=e.success,r=e.fail,o=e.complete,i=!1;Ae[t]?(i={errMsg:"getProvider:ok",service:t,provider:Ae[t]},b(n)&&n(i)):(i={errMsg:"getProvider:fail:服务["+t+"]不存在"},b(r)&&r(i)),b(o)&&o(i)}var ke=Object.freeze({__proto__:null,getProvider:Se}),Ee=function(){return"function"===typeof getUniEmitter?getUniEmitter:function(){return e||(e=new r.default),e};var e}();function Te(e,t,n){return e[t].apply(e,n)}function $e(){return Te(Ee(),"$on",Array.prototype.slice.call(arguments))}function Pe(){return Te(Ee(),"$off",Array.prototype.slice.call(arguments))}function je(){return Te(Ee(),"$once",Array.prototype.slice.call(arguments))}function Ie(){return Te(Ee(),"$emit",Array.prototype.slice.call(arguments))}var Ce=Object.freeze({__proto__:null,$on:$e,$off:Pe,$once:je,$emit:Ie}),De=Object.freeze({__proto__:null}),Ne=Page,Me=Component,Re=/:/g,Ue=S((function(e){return E(e.replace(Re,"-"))}));function Le(e){var t=e.triggerEvent;e.triggerEvent=function(n){for(var r=arguments.length,o=new Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return t.apply(e,[Ue(n)].concat(o))}}function qe(e,t){var n=t[e];t[e]=n?function(){Le(this);for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return n.apply(this,t)}:function(){Le(this)}}Page=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return qe("onLoad",e),Ne(e)},Component=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return qe("created",e),Me(e)};var Fe=["onPullDownRefresh","onReachBottom","onShareAppMessage","onPageScroll","onResize","onTabItemTap"];function Ke(e,t){var n=e.$mp[e.mpType];t.forEach((function(t){O(n,t)&&(e[t]=n[t])}))}function Ve(e,t){if(!t)return!0;if(r.default.options&&Array.isArray(r.default.options[e]))return!0;if(t=t.default||t,b(t))return!!b(t.extendOptions[e])||!!(t.super&&t.super.options&&Array.isArray(t.super.options[e]));if(b(t[e]))return!0;var n=t.mixins;return Array.isArray(n)?!!n.find((function(t){return Ve(e,t)})):void 0}function Be(e,t,n){t.forEach((function(t){Ve(t,n)&&(e[t]=function(e){return this.$vm&&this.$vm.__call_hook(t,e)})}))}function He(e,t){var n;return t=t.default||t,n=b(t)?t:e.extend(t),t=n.options,[n,t]}function Ge(e,t){if(Array.isArray(t)&&t.length){var n=Object.create(null);t.forEach((function(e){n[e]=!0})),e.$scopedSlots=e.$slots=n}}function Ye(e,t){e=(e||"").split(",");var n=e.length;1===n?t._$vueId=e[0]:2===n&&(t._$vueId=e[0],t._$vuePid=e[1])}function ze(e,t){var n=e.data||{},r=e.methods||{};if("function"===typeof n)try{n=n.call(t)}catch(o){Object({NODE_ENV:"development",VUE_APP_PLATFORM:"mp-qq",BASE_URL:"/"}).VUE_APP_DEBUG&&console.warn("根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。",n)}else try{n=JSON.parse(JSON.stringify(n))}catch(o){}return x(n)||(n={}),Object.keys(r).forEach((function(e){-1!==t.__lifecycle_hooks__.indexOf(e)||O(n,e)||(n[e]=r[e])})),n}var We=[String,Number,Boolean,Object,Array,null];function Je(e){return function(t,n){this.$vm&&(this.$vm[e]=t)}}function Xe(e,t){var n=e.behaviors,r=e.extends,o=e.mixins,i=e.props;i||(e.props=i=[]);var s=[];return Array.isArray(n)&&n.forEach((function(e){s.push(e.replace("uni://","wx".concat("://"))),"uni://form-field"===e&&(Array.isArray(i)?(i.push("name"),i.push("value")):(i.name={type:String,default:""},i.value={type:[String,Number,Boolean,Array,Object,Date],default:""}))})),x(r)&&r.props&&s.push(t({properties:Ze(r.props,!0)})),Array.isArray(o)&&o.forEach((function(e){x(e)&&e.props&&s.push(t({properties:Ze(e.props,!0)}))})),s}function Qe(e,t,n,r){return Array.isArray(t)&&1===t.length?t[0]:t}function Ze(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=(arguments.length>2&&void 0!==arguments[2]&&arguments[2],{});return t||(n.vueId={type:String,value:""},n.vueSlots={type:null,value:[],observer:function(e,t){var n=Object.create(null);e.forEach((function(e){n[e]=!0})),this.setData({$slots:n})}}),Array.isArray(e)?e.forEach((function(e){n[e]={type:null,observer:Je(e)}})):x(e)&&Object.keys(e).forEach((function(t){var r=e[t];if(x(r)){var o=r.default;b(o)&&(o=o()),r.type=Qe(t,r.type),n[t]={type:-1!==We.indexOf(r.type)?r.type:null,value:o,observer:Je(t)}}else{var i=Qe(t,r);n[t]={type:-1!==We.indexOf(i)?i:null,observer:Je(t)}}})),n}function et(e){try{e.mp=JSON.parse(JSON.stringify(e))}catch(t){}return e.stopPropagation=A,e.preventDefault=A,e.target=e.target||{},O(e,"detail")||(e.detail={}),O(e,"markerId")&&(e.detail="object"===typeof e.detail?e.detail:{},e.detail.markerId=e.markerId),x(e.detail)&&(e.target=Object.assign({},e.target,e.detail)),e}function tt(e,t){var n=e;return t.forEach((function(t){var r=t[0],o=t[2];if(r||"undefined"!==typeof o){var i=t[1],s=t[3],a=r?e.__get_value(r,n):n;Number.isInteger(a)?n=o:i?Array.isArray(a)?n=a.find((function(t){return e.__get_value(i,t)===o})):x(a)?n=Object.keys(a).find((function(t){return e.__get_value(i,a[t])===o})):console.error("v-for 暂不支持循环数据：",a):n=a[o],s&&(n=e.__get_value(s,n))}})),n}function nt(e,t,n){var r={};return Array.isArray(t)&&t.length&&t.forEach((function(t,o){"string"===typeof t?t?"$event"===t?r["$"+o]=n:0===t.indexOf("$event.")?r["$"+o]=e.__get_value(t.replace("$event.",""),n):r["$"+o]=e.__get_value(t):r["$"+o]=e:r["$"+o]=tt(e,t)})),r}function rt(e){for(var t={},n=1;n<e.length;n++){var r=e[n];t[r[0]]=r[1]}return t}function ot(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],o=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,s=!1;if(o&&(s=t.currentTarget&&t.currentTarget.dataset&&"wx"===t.currentTarget.dataset.comType,!n.length))return s?[t]:t.detail.__args__||t.detail;var a=nt(e,r,t),c=[];return n.forEach((function(e){"$event"===e?"__set_model"!==i||o?o&&!s?c.push(t.detail.__args__[0]):c.push(t):c.push(t.target.value):Array.isArray(e)&&"o"===e[0]?c.push(rt(e)):"string"===typeof e&&O(a,e)?c.push(a[e]):c.push(e)})),c}var it="~",st="^";function at(e,t){return e===t||"regionchange"===t&&("begin"===e||"end"===e)}function ct(e){var t=this;e=et(e);var n=(e.currentTarget||e.target).dataset;if(!n)return console.warn("事件信息不存在");var r=n.eventOpts||n["event-opts"];if(!r)return console.warn("事件信息不存在");var o=e.type,i=[];return r.forEach((function(n){var r=n[0],s=n[1],a=r.charAt(0)===st;r=a?r.slice(1):r;var c=r.charAt(0)===it;r=c?r.slice(1):r,s&&at(o,r)&&s.forEach((function(n){var r=n[0];if(r){var o=t.$vm;if(o.$options.generic&&o.$parent&&o.$parent.$parent&&(o=o.$parent.$parent),"$emit"===r)return void o.$emit.apply(o,ot(t.$vm,e,n[1],n[2],a,r));var s=o[r];if(!b(s))throw new Error(" _vm.".concat(r," is not a function"));if(c){if(s.once)return;s.once=!0}i.push(s.apply(o,ot(t.$vm,e,n[1],n[2],a,r)))}}))})),"input"===o&&1===i.length&&"undefined"!==typeof i[0]?i[0]:void 0}var ut=["onShow","onHide","onError","onPageNotFound"];function ft(e,t){var n=t.mocks,o=t.initRefs;e.$options.store&&(r.default.prototype.$store=e.$options.store),r.default.prototype.mpHost="mp-qq",r.default.mixin({beforeCreate:function(){this.$options.mpType&&(this.mpType=this.$options.mpType,this.$mp=l({data:{}},this.mpType,this.$options.mpInstance),this.$scope=this.$options.mpInstance,delete this.$options.mpType,delete this.$options.mpInstance,"app"!==this.mpType&&(o(this),Ke(this,n)))}});var i={onLaunch:function(t){this.$vm||(wx.canIUse("nextTick")||console.error("当前微信基础库版本过低，请将 微信开发者工具-详情-项目设置-调试基础库版本 更换为`2.3.0`以上"),this.$vm=e,this.$vm.$mp={app:this},this.$vm.$scope=this,this.$vm.globalData=this.globalData,this.$vm._isMounted=!0,this.$vm.__call_hook("mounted",t),this.$vm.__call_hook("onLaunch",t))}};i.globalData=e.$options.globalData||{};var s=e.$options.methods;return s&&Object.keys(s).forEach((function(e){i[e]=s[e]})),Be(i,ut),i}var lt=["__route__","__wxExparserNodeId__","__wxWebviewId__"];function pt(e,t){for(var n,r=e.$children,o=r.length-1;o>=0;o--){var i=r[o];if(i.$scope._$vueId===t)return i}for(var s=r.length-1;s>=0;s--)if(n=pt(r[s],t),n)return n}function dt(e){return Behavior(e)}function ht(){return!!this.route}function vt(e){this.triggerEvent("__l",e)}function yt(e){var t=e.$scope;Object.defineProperty(e,"$refs",{get:function(){var e={},n=t.selectAllComponents(".vue-ref");n.forEach((function(t){var n=t.dataset.ref;e[n]=t.$vm||t}));var r=t.selectAllComponents(".vue-ref-in-for");return r.forEach((function(t){var n=t.dataset.ref;e[n]||(e[n]=[]),e[n].push(t.$vm||t)})),e}})}function mt(e){var t,n=e.detail||e.value,r=n.vuePid,o=n.vueOptions;r&&(t=pt(this.$vm,r)),t||(t=this.$vm),o.parent=t}function gt(e){return ft(e,{mocks:lt,initRefs:yt})}function _t(e){return gt(e)}function bt(e){return App(_t(e)),e}function wt(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.isPage,o=t.initRelation,i=He(r.default,e),c=a(i,2),u=c[0],f=c[1],l=s({multipleSlots:!0,addGlobalClass:!0},f.options||{});f["mp-weixin"]&&f["mp-weixin"].options&&Object.assign(l,f["mp-weixin"].options);var p={options:l,data:ze(f,r.default.prototype),behaviors:Xe(f,dt),properties:Ze(f.props,!1,f.__file),lifetimes:{attached:function(){var e=this.properties,t={mpType:n.call(this)?"page":"component",mpInstance:this,propsData:e};Ye(e.vueId,this),o.call(this,{vuePid:this._$vuePid,vueOptions:t}),this.$vm=new u(t),Ge(this.$vm,e.vueSlots),this.$vm.$mount()},ready:function(){this.$vm&&(this.$vm._isMounted=!0,this.$vm.__call_hook("mounted"),this.$vm.__call_hook("onReady"))},detached:function(){this.$vm&&this.$vm.$destroy()}},pageLifetimes:{show:function(e){this.$vm&&this.$vm.__call_hook("onPageShow",e)},hide:function(){this.$vm&&this.$vm.__call_hook("onPageHide")},resize:function(e){this.$vm&&this.$vm.__call_hook("onPageResize",e)}},methods:{__l:mt,__e:ct}};return f.externalClasses&&(p.externalClasses=f.externalClasses),Array.isArray(f.wxsCallMethods)&&f.wxsCallMethods.forEach((function(e){p.methods[e]=function(t){return this.$vm[e](t)}})),n?p:[p,u]}function xt(e){return wt(e,{isPage:ht,initRelation:vt})}function Ot(e){return xt(e)}var At=["onShow","onHide","onUnload"];function St(e,t){t.isPage,t.initRelation;var n=Ot(e);return Be(n.methods,At,e),n.methods.onLoad=function(e){this.$vm.$mp.query=e,this.$vm.__call_hook("onLoad",e)},n}function kt(e){return St(e,{isPage:ht,initRelation:vt})}function Et(e){return kt(e)}function Tt(e){return Component(Et(e))}function $t(e){return Component(Ot(e))}At.push.apply(At,Fe),he.forEach((function(e){de[e]=!1})),ve.forEach((function(e){var t=de[e]&&de[e].name?de[e].name:e;wx.canIUse(t)||(de[e]=!1)}));var Pt={};"undefined"!==typeof Proxy?Pt=new Proxy({},{get:function(e,t){return e[t]?e[t]:le[t]?le[t]:De[t]?ne(t,De[t]):ke[t]?ne(t,ke[t]):we[t]?ne(t,we[t]):Ce[t]?Ce[t]:O(wx,t)||O(de,t)?ne(t,be(t,wx[t])):void 0},set:function(e,t,n){return e[t]=n,!0}}):(Object.keys(le).forEach((function(e){Pt[e]=le[e]})),Object.keys(we).forEach((function(e){Pt[e]=ne(e,we[e])})),Object.keys(ke).forEach((function(e){Pt[e]=ne(e,we[e])})),Object.keys(Ce).forEach((function(e){Pt[e]=Ce[e]})),Object.keys(De).forEach((function(e){Pt[e]=ne(e,De[e])})),Object.keys(wx).forEach((function(e){(O(wx,e)||O(de,e))&&(Pt[e]=ne(e,be(e,wx[e])))}))),wx.createApp=bt,wx.createPage=Tt,wx.createComponent=$t;var jt=Pt,It=jt;t.default=It},10:
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e,t,n,r,o,i,s,a,c,u){var f,l="function"===typeof e?e.options:e;if(c){l.components||(l.components={});var p=Object.prototype.hasOwnProperty;for(var d in c)p.call(c,d)&&!p.call(l.components,d)&&(l.components[d]=c[d])}if(u&&((u.beforeCreate||(u.beforeCreate=[])).unshift((function(){this[u.__module]=this})),(l.mixins||(l.mixins=[])).push(u)),t&&(l.render=t,l.staticRenderFns=n,l._compiled=!0),r&&(l.functional=!0),i&&(l._scopeId="data-v-"+i),s?(f=function(e){e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,e||"undefined"===typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(s)},l._ssrRegister=f):o&&(f=a?function(){o.call(this,this.$root.$options.shadowRoot)}:o),f)if(l.functional){l._injectStyles=f;var h=l.render;l.render=function(e,t){return f.call(t),h(e,t)}}else{var v=l.beforeCreate;l.beforeCreate=v?[].concat(v,f):[f]}return{exports:e,options:l}}n.r(t),n.d(t,"default",(function(){return r}))},109:
/*!**********************************************************************************!*\
  !*** /Users/sharknet/Documents/HBuilderProjects/万能工具集/utils/relationship.min.js ***!
  \**********************************************************************************/
/*! no static exports found */function(e,t,n){!function(t,n){e.exports?e.exports=n():t.relationship=n()}("undefined"!=typeof window?window:this,(function(){function e(e){e=e.replace(/[二|三|四|五|六|七|八|九|十]{1,2}/g,"x");for(var t=e.split("的"),n=[],r=!0;t.length;){var o=t.shift(),i=[],s=!1;for(var c in a){var u=a[c];u.indexOf(o)>-1&&(!c&&t.length||i.push(c),s=!0)}if(s||(r=!1),n.length){var f=[];for(c=0;c<n.length;c++)for(var l=0;l<i.length;l++)f.push(n[c]+","+i[l]);n=f}else for(c=0;c<i.length;c++)n.push(","+i[c])}return r?n:[]}function t(e,t){var n=[],r={};t<0&&(0==e.indexOf(",w")?t=1:0==e.indexOf(",h")&&(t=0)),t>-1&&(e=","+t+e);var o=function e(t){var o="";if(!r[t]){r[t]=!0;var i=!0;do{for(var a in o=t,s){var c=s[a];if(t=t.replace(c.exp,c.str),t.indexOf("#")>-1){var u=t.split("#");for(a=0;a<u.length;a++)e(u[a]);i=!1;break}}}while(o!=t);i&&(t=t.replace(/,[01]/,"").substr(1),n.push(t))}};return o(e),n}function n(e){var t=[],n=/&[olx]/g;for(var r in a)r.replace(n,"")==e&&t.push(a[r]);return t}function r(e,t){var n={f:["d","s"],m:["d","s"],h:["w",""],w:["","h"],s:["m","f"],d:["m","f"],lb:["os","ob"],ob:["ls","lb"],xb:["xs","xb"],ls:["os","ob"],os:["ls","lb"],xs:["xs","xb"]},r="";if(e.indexOf("&o")>-1?r="&l":e.indexOf("&l")>-1&&(r="&o"),e){e=e.replace(/&[ol]/g,""),t=t?1:0;var o=(","+t+","+e).replace(/,[fhs]|,[olx]b/g,",1").replace(/,[mwd]|,[olx]s/g,",0");o=o.substring(0,o.lastIndexOf(","));for(var i=e.split(",").reverse(),s=o.split(",").reverse(),a=[],c=0;c<i.length;c++)a.push(n[i[c]][s[c]]);return a.join(",")+r}return""}function o(e){for(var t=e.split(","),n=[],r=0;r<t.length;r++){var o=t[r].replace(/&[ol]/,"");n.push(a[o][0])}return n.join("的")}function i(i){var s={text:"",sex:-1,type:"default",reverse:!1};for(var u in i)s[u]=i[u];for(var f=e(s.text),l=[],p=0;p<f.length;p++)for(var d=t(f[p],s.sex),h=0;h<d.length;h++){var v=d[h];if("chain"==s.type){var y=o(v);y&&l.push(y)}else if(s.reverse&&(v=r(v,s.sex)),a[v])l.push(a[v][0]);else{y=n(v);if(y.length||(v=v.replace(/&[ol]/g,""),y=n(v)),y.length||(v=v.replace(/[ol]/g,"x"),y=n(v)),!y.length){var m=v.replace(/x/g,"l");y=n(m);var g=v.replace(/x/g,"o");y=y.concat(n(g))}for(var _=0;_<y.length;_++)l.push(y[_][0])}}return c(l)}var s=[{exp:/^(.+)&o([^#]+)&l/g,str:"$1$2"},{exp:/^(.+)&l([^#]+)&o/g,str:"$1$2"},{exp:/(,[ds],(.+),[ds])&[ol]/g,str:"$1"},{exp:/m,h/g,str:"f"},{exp:/f,w/g,str:"m"},{exp:/,[xol][sb](,[mf])/g,str:"$1"},{exp:/,[mf],d&([ol])/,str:",$1s"},{exp:/,[mf],s&([ol])/,str:",$1b"},{exp:/^(.*)(,[fh1]|[xol]b),[mf],s(.*)$/,str:"$1$2,xb$3#$1$2$3"},{exp:/^(.*)(,[mw0]|[xol]s),[mf],d(.*)$/,str:"$1$2,xs$3#$1$2$3"},{exp:/(,[mw0]|[xol]s),[mf],s/,str:"$1,xb"},{exp:/(,[fh1]|[xol]b),[mf],d/,str:"$1,xs"},{exp:/^,[mf],s(.+)?$/,str:",1$1#,xb$1"},{exp:/^,[mf],d(.+)?$/,str:",0$1#,xs$1"},{exp:/(,o[sb])+(,o[sb])/,str:"$2"},{exp:/(,l[sb])+(,l[sb])/,str:"$2"},{exp:/^(.*)(,[fh1])(,[olx][sb])+,[olx]b(.*)$/,str:"$1$2,xb$4#$1$2$4"},{exp:/^(.*)(,[mw0])(,[olx][sb])+,[olx]s(.*)$/,str:"$1$2,xs$4#$1$2$4"},{exp:/(,[fh1])(,[olx][sb])+,[olx]s/g,str:"$1,xs"},{exp:/(,[mw0])(,[olx][sb])+,[olx]b/g,str:"$1,xb"},{exp:/^,[olx][sb],[olx]b(.+)?$/,str:"$1#,xb$1"},{exp:/^,[olx][sb],[olx]s(.+)?$/,str:"$1#,xs$1"},{exp:/^,x([sb])$/,str:",o$1#,l$1"},{exp:/,[ds]&o,ob/g,str:",s&o"},{exp:/,[ds]&o,os/g,str:",d&o"},{exp:/,[ds]&l,lb/g,str:",s&l"},{exp:/,[ds]&l,ls/g,str:",d&l"},{exp:/,[ds](&[ol])?,[olx]s/g,str:",d"},{exp:/,[ds](&[ol])?,[olx]b/g,str:",s"},{exp:/(,[mwd0](&[ol])?|[olx]s),[ds](&[ol])?,m/g,str:"$1"},{exp:/(,[mwd0](&[ol])?|[olx]s),[ds](&[ol])?,f/g,str:"$1,h"},{exp:/(,[fhs1](&[ol])?|[olx]b),[ds](&[ol])?,f/g,str:"$1"},{exp:/(,[fhs1](&[ol])?|[olx]b),[ds](&[ol])?,m/g,str:"$1,w"},{exp:/^,[ds],m(.+)?$/,str:"$1#,w$1"},{exp:/^,[ds],f(.+)?$/,str:"$1#,h$1"},{exp:/,[wh](,[ds])/g,str:"$1"},{exp:/,w,h|,h,w/g,str:""}],a={"":["自己","我"],f:["爸爸","父亲","阿爸","老爸","老窦","爹","爹爹","爹地","爹啲","老爷子"],"f,f":["爷爷","祖父","阿爷","奶爷"],"f,f,f":["曾祖父","太爷","太爷爷","太公","祖公","祖奶爷"],"f,f,f,f":["高祖父","老太爷"],"f,f,f,f,ob":["伯高祖父"],"f,f,f,f,lb":["叔高祖父"],"f,f,f,m":["高祖母","老太太"],"f,f,f,ob":["伯曽祖父","曾伯祖父","伯公太"],"f,f,f,ob,w":["叔曽祖母","曾伯祖母","伯婆太"],"f,f,f,lb":["伯曽祖父","曾叔祖父","叔公太"],"f,f,f,lb,w":["叔曽祖母","曾叔祖母","叔婆太"],"f,f,f,xb,s&o":["堂伯祖父"],"f,f,f,xb,s&o,w":["堂伯祖母"],"f,f,f,xb,s&l":["堂叔祖父"],"f,f,f,xb,s&l,w":["堂叔祖母"],"f,f,f,xb,s,s&o":["从伯父"],"f,f,f,xb,s,s&o,w":["从伯母"],"f,f,f,xb,s,s&l":["从叔父"],"f,f,f,xb,s,s&l,w":["从叔母"],"f,f,f,xb,s,s,s&o":["族兄"],"f,f,f,xb,s,s,s&l":["族弟"],"f,f,f,xs":["太姑婆","姑婆太","曾祖姑母"],"f,f,f,xs,h":["太姑丈公","姑丈公太","曾祖姑丈"],"f,f,f,xs,s&o":["表伯祖父"],"f,f,f,xs,s&o,w":["表伯祖母"],"f,f,f,xs,s&l":["表叔祖父"],"f,f,f,xs,s&l,w":["表叔祖母"],"f,f,m":["曾祖母","太奶奶","太婆","祖婆","祖奶奶"],"f,f,m,xb":["太舅公","太舅爷"],"f,f,m,xb,w":["太舅婆"],"f,f,m,xb,s&o":["表伯祖父"],"f,f,m,xb,s&o,w":["表伯祖母"],"f,f,m,xb,s&l":["表叔祖父"],"f,f,m,xb,s&l,w":["表叔祖母"],"f,f,m,xs":["太姨奶","曾姨奶奶"],"f,f,m,xs,h":["太姨爷"],"f,f,m,xs,s&o":["表伯祖父"],"f,f,m,xs,s&o,w":["表伯祖母"],"f,f,m,xs,s&l":["表叔祖父"],"f,f,m,xs,s&l,w":["表叔祖母"],"f,f,xb":["堂祖父","x爷爷"],"f,f,xb,w":["堂祖母"],"f,f,xb,s&o":["堂伯","堂伯父"],"f,f,xb,s&o,w":["堂伯母"],"f,f,xb,s&l":["堂叔"],"f,f,xb,s,w":["堂婶","堂叔母","堂婶母"],"f,f,xb,s,s&o":["从兄","从兄弟"],"f,f,xb,s,s&o,w":["从嫂"],"f,f,xb,s,s&l":["从弟","从兄弟"],"f,f,xb,s,s&l,w":["从弟妹"],"f,f,xb,s,s,s":["从侄","从侄子"],"f,f,xb,s,s,s,w":["从侄媳妇"],"f,f,xb,s,s,s,s":["从侄孙"],"f,f,xb,s,s,s,d":["从侄孙女"],"f,f,xb,s,s,d":["从侄女"],"f,f,xb,s,s,d,h":["从侄女婿"],"f,f,xb,s,d&o":["从姐","从姐妹"],"f,f,xb,s,d&o,h":["从姐夫"],"f,f,xb,s,d&l":["从妹","从姐妹"],"f,f,xb,s,d&l,h":["从妹夫"],"f,f,xb,d":["堂姑"],"f,f,xb,d,h":["堂姑丈"],"f,f,ob":["伯祖父","伯公","大爷爷","大爷","堂祖父","伯爷爷","伯老爷"],"f,f,ob,w":["伯祖母","伯婆","大奶奶","堂祖母"],"f,f,lb":["叔祖父","叔公","小爷爷","堂祖父","叔爷爷","叔老爷"],"f,f,lb,w":["叔祖母","叔婆","小奶奶","堂祖母","叔奶奶"],"f,f,xs":["姑婆","姑祖母","祖姑母","姑奶奶"],"f,f,xs,h":["姑丈公","姑祖父","祖姑丈","姑爷爷","姑奶爷","姑老爷"],"f,f,xs,s&o":["表伯","表伯父"],"f,f,xs,s&o,w":["表伯母"],"f,f,xs,s&l":["表叔","表叔父"],"f,f,xs,s&l,w":["表婶","表叔母"],"f,f,xs,d":["表姑"],"f,f,xs,d,h":["表姑丈"],"f,m":["奶奶","祖母","阿嫲","嫲嫲"],"f,m,f":["曾外祖父","外太公"],"f,m,m":["曾外祖母","外太婆"],"f,m,xb":["舅公","舅老爷","舅爷爷","舅爷","舅祖","舅奶爷","舅祖父","太舅父"],"f,m,xb,w":["舅婆","舅奶奶","舅祖母","妗婆","太舅母"],"f,m,xb,s&o":["表伯","表伯父"],"f,m,xb,s&o,w":["表伯母"],"f,m,xb,s&l":["表叔","表叔父"],"f,m,xb,s&l,w":["表婶","表叔母"],"f,m,xb,d":["表姑"],"f,m,xb,d,h":["表姑丈"],"f,m,xs":["姨婆","姨奶奶","姨祖父"],"f,m,xs,h":["姨丈公","姨爷爷","姨祖母","姨爷","姨老爷","姨奶爷"],"f,m,xs,s&o":["表伯","表伯父"],"f,m,xs,s&o,w":["表伯母"],"f,m,xs,s&l":["表叔","表叔父"],"f,m,xs,s&l,w":["表婶","表叔母"],"f,m,xs,d":["表姑"],"f,m,xs,d,h":["表姑丈"],"f,xb,s&o":["堂哥","堂兄"],"f,xb,s&o,w":["堂嫂"],"f,xb,s&l":["堂弟"],"f,xb,s&l,w":["堂弟媳"],"f,xb,s,s":["堂侄","堂侄子"],"f,xb,s,s,w":["堂侄媳妇"],"f,xb,s,s,s":["堂侄孙"],"f,xb,s,s,s,w":["堂侄孙媳妇"],"f,xb,s,s,d":["堂侄孙女"],"f,xb,s,s,d,h":["堂侄孙女婿"],"f,xb,s,d":["堂侄女"],"f,xb,s,d,h":["堂侄女婿"],"f,xb,d&o":["堂姐"],"f,xb,d&o,h":["堂姐夫"],"f,xb,d&l":["堂妹"],"f,xb,d&l,h":["堂妹夫"],"f,xb,d,s":["堂外甥"],"f,xb,d,d":["堂外甥女"],"f,ob":["伯父","伯伯","大伯","x伯"],"f,ob,w":["伯母","大娘"],"f,lb":["叔叔","叔父","阿叔","叔","仲父","x叔"],"f,lb,w":["婶婶","婶母","阿婶","家婶","婶","季母"],"f,xs":["姑妈","姑母","姑姑","姑"],"f,xs,h":["姑丈","姑父","姑夫"],"f,xs,s&o":["表哥(姑家)","表哥"],"f,xs,s&o,w":["表嫂(姑家)","表嫂"],"f,xs,s&l":["表弟(姑家)","表弟"],"f,xs,s&l,w":["表弟媳(姑家)","表弟媳"],"f,xs,s,s":["表侄子"],"f,xs,s,s,s":["表侄孙"],"f,xs,s,s,s,w":["表侄孙媳妇"],"f,xs,s,s,d":["表侄孙女"],"f,xs,s,s,d,h":["表侄孙女婿"],"f,xs,s,d":["表侄女"],"f,xs,s,d,s":["外表侄孙"],"f,xs,s,d,s,w":["外表侄孙媳妇"],"f,xs,s,d,d":["外表侄孙女"],"f,xs,s,d,d,h":["外表侄孙女婿"],"f,xs,d&o":["表姐(姑家)","表姐"],"f,xs,d&o,h":["表姐夫(姑家)","表姐夫","表姐丈"],"f,xs,d&l":["表妹(姑家)","表妹"],"f,xs,d&l,h":["表妹夫(姑家)","表妹夫"],"f,xs,d,s":["表外甥"],"f,xs,d,d":["表外甥女"],"f,os":["姑母"],"f,ls":["姑姐"],m:["妈妈","母亲","老妈","阿妈","老母","老妈子","娘","娘亲","妈咪"],"m,f":["外公","姥爷","阿公"],"m,f,f":["外曾祖父","外太祖父","太外祖父","太姥爷","外太公"],"m,f,f,xb":["外太伯公"],"m,f,f,xb,w":["外太伯母"],"m,f,f,xs":["外太姑婆"],"m,f,f,xs,h":["外太姑丈公"],"m,f,f,xs,s&o":["外表伯祖父"],"m,f,f,xs,s&o,w":["外表伯祖母"],"m,f,f,xs,s&l":["外表叔祖父"],"m,f,f,xs,s&l,w":["外表叔祖母"],"m,f,m":["外曾祖母","外太祖母","太外祖母","太姥姥","外太婆"],"m,f,m,xb":["外太舅公"],"m,f,m,xb,w":["外太舅母","外太舅婆"],"m,f,m,xs":["外太姨婆"],"m,f,m,xs,h":["外太姑姨公"],"m,f,xb":["小姥爷","x姥爷"],"m,f,xb,s":["堂舅","堂舅父"],"m,f,xb,s,w":["堂舅妈","堂舅母"],"m,f,xb,d":["堂姨"],"m,f,xb,d,h":["堂姨丈"],"m,f,ob":["外伯祖父","伯姥爷","大姥爷","外伯祖"],"m,f,ob,w":["外伯祖母","伯姥姥","大姥姥","外姆婆"],"m,f,lb":["外叔祖父","叔姥爷","小姥爷","外叔祖"],"m,f,lb,w":["外叔祖母","叔姥姥","小姥姥","外姆婆"],"m,f,xs":["外姑祖母","姑姥姥","外太姑母"],"m,f,xs,h":["外姑祖父","姑姥爷","外太姑父"],"m,f,xs,s":["表舅","表舅父"],"m,f,xs,s,w":["表舅妈","表舅母"],"m,f,xs,d":["表姨","表姨母","表姨妈","表阿姨"],"m,f,xs,d,h":["表姨丈","表姨父"],"m,m":["外婆","姥姥","阿婆"],"m,m,f":["外曾外祖父","外太外公","太姥爷"],"m,m,m":["外曾外祖母","外太外婆","太姥姥"],"m,m,xb":["外舅公","外舅祖父","舅姥爷","舅外祖父","舅外公","舅公"],"m,m,xb,w":["外舅婆","外舅祖母","舅姥姥"],"m,m,xb,s":["表舅","表舅父"],"m,m,xb,s,w":["表舅妈","表舅母"],"m,m,xb,d":["表姨","表姨母","表姨妈","表阿姨"],"m,m,xb,d,h":["表姨丈","表姨父"],"m,m,xs":["外姨婆","外姨祖母","姨姥姥","姨婆"],"m,m,xs,h":["外姨丈公","外姨祖父","姨姥爷"],"m,m,xs,s":["表舅","表舅父"],"m,m,xs,s,w":["表舅妈","表舅母"],"m,m,xs,d":["表姨","表姨母","表姨妈","表阿姨"],"m,m,xs,d,h":["表姨丈","表姨父"],"m,xb":["舅舅","舅父","舅","娘舅","舅仔","x舅"],"m,xb,w":["舅妈","舅母","妗妗","妗母","阿妗","x舅妈"],"m,xb,s&o":["表哥(舅家)","表哥"],"m,xb,s&o,w":["表嫂(舅家)","表嫂"],"m,xb,s&l":["表弟(舅家)","表弟"],"m,xb,s&l,w":["表弟媳(舅家)","表弟媳"],"m,xb,s,s":["表侄子"],"m,xb,s,s,s":["表侄孙"],"m,xb,s,s,s,w":["表侄孙媳妇"],"m,xb,s,s,d":["表侄孙女"],"m,xb,s,s,d,h":["表侄孙女婿"],"m,xb,s,d":["表侄女"],"m,xb,s,d,s":["外表侄孙"],"m,xb,s,d,s,w":["外表侄孙媳妇"],"m,xb,s,d,d":["外表侄孙女"],"m,xb,s,d,d,h":["外表侄孙女婿"],"m,xb,d&o":["表姐(舅家)","表姐"],"m,xb,d&o,h":["表姐夫(舅家)","表姐夫","表姐丈"],"m,xb,d&l":["表妹(舅家)","表妹"],"m,xb,d&l,h":["表妹夫(舅家)","表妹夫"],"m,xb,d,s":["表外甥"],"m,xb,d,d":["表外甥女"],"m,ob":["大舅"],"m,ob,w":["大舅妈"],"m,lb":["小舅","舅父仔"],"m,lb,w":["小舅妈"],"m,xs":["姨妈","姨母","姨姨","姨娘","阿姨","姨","x姨","x姨妈"],"m,xs,h":["姨丈","姨夫","姨父","x姨父"],"m,xs,s&o":["表哥(姨家)","表哥"],"m,xs,s&o,w":["表嫂(姨家)","表嫂"],"m,xs,s&l":["表弟(姨家)","表弟"],"m,xs,s&l,w":["表弟媳(姨家)","表弟媳"],"m,xs,s,s":["表侄子"],"m,xs,s,s,s":["表侄孙"],"m,xs,s,s,s,w":["表侄孙媳妇"],"m,xs,s,s,d":["表侄孙女"],"m,xs,s,s,d,h":["表侄孙女婿"],"m,xs,s,d":["表侄女"],"m,xs,s,d,s":["外表侄孙"],"m,xs,s,d,s,w":["外表侄孙媳妇"],"m,xs,s,d,d":["外表侄孙女"],"m,xs,s,d,d,h":["外表侄孙女婿"],"m,xs,d&o":["表姐(姨家)","表姐"],"m,xs,d&o,h":["表姐夫(姨家)","表姐夫","表姐丈"],"m,xs,d&l":["表妹(姨家)","表妹"],"m,xs,d&l,h":["表妹夫(姨家)","表妹夫"],"m,xs,d,s":["表外甥"],"m,xs,d,d":["表外甥女"],"m,os":["大姨","大姨妈"],"m,os,h":["大姨父","大姨丈","大姨夫"],"m,ls":["小姨","小姨妈","姨仔"],"m,ls,h":["小姨父","小姨丈","小姨夫"],h:["老公","丈夫","先生","官人","男人","汉子","夫","夫君","爱人"],"h,f":["公公"],"h,f,f":["祖翁"],"h,f,f,f":["太公翁"],"h,f,f,m":["太奶亲"],"h,f,m":["祖婆"],"h,f,ob":["伯翁"],"h,f,ob,w":["伯婆"],"h,f,lb":["叔翁"],"h,f,lb,w":["叔婆"],"h,f,xb,s&o":["堂大伯","堂兄"],"h,f,xb,s&o,w":["堂嫂"],"h,f,xb,s&l":["堂叔仔","堂弟"],"h,f,xb,s&l,w":["堂小弟"],"h,m":["婆婆"],"h,m,xb":["舅公"],"h,m,xb,w":["舅婆"],"h,m,xs":["姨婆"],"h,m,xs,h":["姨公"],"h,xb,s":["侄子","侄儿"],"h,xb,s,w":["侄媳","侄媳妇"],"h,xb,s,s":["侄孙","侄孙子"],"h,xb,s,s,w":["侄孙媳"],"h,xb,s,d":["侄孙女"],"h,xb,s,d,h":["侄孙女婿"],"h,xb,d":["侄女"],"h,xb,d,h":["侄女婿","侄婿"],"h,xb,d,s":["外侄孙"],"h,xb,d,s,w":["外侄媳妇"],"h,xb,d,d":["外侄孙女"],"h,xb,d,d,h":["外侄孙女婿"],"h,ob":["大伯子","大伯哥","夫兄"],"h,ob,w":["大婶子","大伯嫂","大伯妇","伯娘","大伯娘","大嫂","夫兄嫂","妯娌"],"h,lb":["小叔子","小叔弟"],"h,lb,w":["小婶子","小叔妇","小叔媳妇","妯娌"],"h,xs,s":["外甥"],"h,xs,s,w":["外甥媳妇"],"h,xs,s,s":["外甥孙"],"h,xs,s,s,w":["外甥孙媳妇"],"h,xs,s,s,s":["外曾甥孙"],"h,xs,s,s,d":["外曾甥孙女"],"h,xs,s,d":["外甥孙女"],"h,xs,s,d,h":["外甥孙女婿"],"h,xs,s,d,s":["外曾甥孙"],"h,xs,s,d,d":["外曾甥孙女"],"h,xs,d":["外甥女"],"h,xs,d,h":["外甥女婿"],"h,xs,d,s":["外甥孙"],"h,xs,d,s,w":["外甥孙媳妇"],"h,xs,d,s,s":["外曾甥孙"],"h,xs,d,s,d":["外曾甥孙女"],"h,xs,d,d":["外甥孙女"],"h,xs,d,d,h":["外甥孙女婿"],"h,xs,d,d,s":["外曾甥孙"],"h,xs,d,d,d":["外曾甥孙女"],"h,os":["大姑子","大姑","大娘姑"],"h,os,h":["大姑夫","姊丈","大姑姐夫"],"h,ls":["小姑子","小姑","姑仔"],"h,ls,h":["小姑夫","小姑妹夫"],w:["老婆","妻子","太太","媳妇","夫人","女人","婆娘","妻","内人","娘子","爱人"],"w,f":["岳父","老丈人","丈人","泰山","妻父"],"w,f,f":["太岳父"],"w,f,f,ob":["太伯岳"],"w,f,f,ob,w":["太伯岳母"],"w,f,f,lb,":["太叔岳"],"w,f,f,lb,w":["太叔岳母"],"w,f,f,xb,s&o":["姻伯"],"w,f,f,xb,s&o,w":["姻姆"],"w,f,f,xb,s&l":["姻叔"],"w,f,f,xb,s&l,w":["姻婶"],"w,f,f,xs":["太姑岳母"],"w,f,f,xs,h":["太姑岳父"],"w,f,m":["太岳母"],"w,f,m,xb":["太舅岳父"],"w,f,m,xb,w":["太舅岳母"],"w,f,m,xs":["太姨岳母"],"w,f,m,xs,h":["太姨岳父"],"w,f,xb,s&o":["堂大舅","姻家兄"],"w,f,xb,s&l":["堂舅仔","姻家弟"],"w,f,xb,d&o":["堂大姨"],"w,f,xb,d&l":["堂姨仔"],"w,f,ob":["伯岳","伯岳父"],"w,f,ob,w":["伯岳母"],"w,f,lb":["叔岳","叔岳父"],"w,f,lb,w":["叔岳母"],"w,f,xs":["姑岳母"],"w,f,xs,s&o":["表大舅"],"w,f,xs,s&l":["表舅仔"],"w,f,xs,d&o":["表大姨"],"w,f,xs,d&l":["表姨仔"],"w,m":["岳母","丈母娘"],"w,m,f":["外太岳父"],"w,m,m":["外太岳母"],"w,m,xb":["舅岳父"],"w,m,xb,w":["舅岳母"],"w,m,xb,s&o":["表大舅"],"w,m,xb,s&l":["表舅仔"],"w,m,xb,d&o":["表大姨"],"w,m,xb,d&l":["表姨仔"],"w,m,xs":["姨岳母"],"w,m,xs,h":["姨岳父"],"w,m,xs,s&o":["表大舅"],"w,m,xs,s&l":["表舅仔"],"w,m,xs,d&o":["表大姨"],"w,m,xs,d&l":["表姨仔"],"w,xb,s":["内侄","妻侄"],"w,xb,s,w":["内侄媳妇"],"w,xb,s,s":["侄孙"],"w,xb,s,s,w":["侄孙媳妇"],"w,xb,s,d":["侄孙女"],"w,xb,s,d,h":["侄孙女婿"],"w,xb,d":["内侄女","妻侄女"],"w,xb,d,h":["内侄女婿"],"w,xb,d,s":["外侄孙"],"w,xb,d,s,w":["外侄孙媳妇"],"w,xb,d,d":["外侄孙女"],"w,xb,d,d,h":["外侄孙女婿"],"w,ob":["大舅哥","大舅子","内兄"],"w,ob,w":["舅嫂","大舅妇","大舅媳妇","大妗子","内嫂"],"w,lb":["小舅子","内弟"],"w,lb,w":["舅弟媳","小舅妇","小舅媳妇","小妗子"],"w,xs,s":["姨甥","妻外甥"],"w,xs,s,w":["姨甥媳妇"],"w,xs,s,s":["姨甥孙"],"w,xs,s,s,w":["姨甥孙媳妇"],"w,xs,s,d":["姨甥孙女"],"w,xs,s,d,h":["姨甥孙女婿"],"w,xs,d":["姨甥女","妻外甥女"],"w,xs,d,h":["姨甥女婿"],"w,xs,d,s":["姨甥孙"],"w,xs,d,s,w":["姨甥孙媳妇"],"w,xs,d,d":["姨甥孙女"],"w,xs,d,d,h":["姨甥孙女婿"],"w,os":["大姨子","大姨姐","妻姐"],"w,os,h":["大姨夫","大姨姐夫","襟兄","连襟"],"w,ls":["小姨子","小姨姐","妻妹","小妹儿"],"w,ls,h":["小姨夫","小姨妹夫","襟弟","连襟"],xb:["兄弟"],"xb,w,f":["姻世伯","亲家爷","亲爹","亲伯"],"xb,w,m":["姻伯母","亲家娘","亲娘"],"xb,s":["侄子","侄儿"],"xb,s,w":["侄媳","侄媳妇"],"xb,s,s":["侄孙","侄孙子"],"xb,s,s,w":["侄孙媳"],"xb,s,s,s":["侄曾孙"],"xb,s,s,d":["侄曾孙女"],"xb,s,d":["侄孙女"],"xb,s,d,h":["侄孙女婿"],"xb,d":["侄女"],"xb,d,h":["侄女婿"],"xb,d,s":["外侄孙","外侄孙子"],"xb,d,s,w":["外侄孙媳妇"],"xb,d,d":["外侄孙女"],"xb,d,d,h":["外侄孙女婿"],ob:["哥哥","哥","兄","阿哥","大哥","大佬","老哥"],"ob,w":["嫂子","大嫂","嫂","阿嫂"],"ob,w,f":["姻伯父"],"ob,w,m":["姻伯母"],lb:["弟弟","弟","细佬","老弟"],"lb,w":["弟妹","弟媳","弟媳妇"],"lb,w,f":["姻叔父"],"lb,w,m":["姻叔母"],xs:["姐妹"],"xs,h,f":["姻世伯","亲家爷","亲爹","亲伯"],"xs,h,m":["姻伯母","亲家娘","亲娘"],"xs,s":["外甥"],"xs,s,w":["外甥媳妇"],"xs,s,s":["外甥孙"],"xs,s,s,w":["外甥孙媳妇"],"xs,s,s,s":["外曾甥孙"],"xs,s,s,d":["外曾甥孙女"],"xs,s,d":["外甥孙女"],"xs,s,d,h":["外甥孙女婿"],"xs,s,d,s":["外曾甥孙"],"xs,s,d,d":["外曾甥孙女"],"xs,d":["外甥女"],"xs,d,h":["外甥女婿"],"xs,d,s":["外甥孙"],"xs,d,s,w":["外甥孙媳妇"],"xs,d,s,s":["外曾甥孙"],"xs,d,s,d":["外曾甥孙女"],"xs,d,d":["外甥孙女"],"xs,d,d,h":["外甥孙女婿"],"xs,d,d,s":["外曾甥孙"],"xs,d,d,d":["外曾甥孙女"],os:["姐姐","姐","家姐","阿姐","阿姊"],"os,h":["姐夫","姊夫","姊婿"],ls:["妹妹","妹","老妹"],"ls,h":["妹夫","妹婿"],s:["儿子","仔","阿仔","仔仔"],"s,w":["儿媳妇","儿媳"],"s,w,xb":["姻侄"],"s,w,xs":["姻侄女"],"s,s":["孙子"],"s,s,w":["孙媳妇","孙媳"],"s,s,s":["曾孙"],"s,s,s,w":["曾孙媳妇"],"s,s,s,s":["玄孙","元孙","膀孙"],"s,s,s,d":["玄孙女"],"s,s,s,s,s":["来孙"],"s,s,d":["曾孙女"],"s,s,d,h":["曾孙女婿"],"s,s,d,s":["外玄孙"],"s,s,d,d":["外玄孙女"],"s,d":["孙女"],"s,d,h":["孙女婿"],"s,d,s":["曾外孙"],"s,d,d":["曾外孙女"],d:["女儿","千金","女","阿女","女女","掌上明珠"],"d,h":["女婿","女婿子","女婿儿"],"d,h,xb":["姻侄"],"d,h,xs":["姻侄女"],"d,s":["外孙"],"d,s,w":["外孙媳"],"d,s,s":["外曾孙","重外孙"],"d,s,d":["外曾孙女","重外孙女"],"d,d":["外孙女"],"d,d,h":["外孙女婿"],"d,d,s":["外曾外孙"],"d,d,d":["外曾外孙女"],"s,w,m":["亲家母"],"s,w,f":["亲家公","亲家翁"],"s,w,f,f":["太姻翁"],"s,w,f,m":["太姻姆"],"s,w,f,ob":["姻兄"],"s,w,f,lb":["姻弟"],"d,h,m":["亲家母"],"d,h,f":["亲家公","亲家翁"],"d,h,f,f":["太姻翁"],"d,h,f,m":["太姻姆"],"d,h,f,ob":["姻兄"],"d,h,f,lb":["姻弟"]},c=function(e){for(var t,n=[],r={},o=0;null!=(t=e[o]);o++)r[t]||(n.push(t),r[t]=!0);return n};return i}))},11:
/*!***********************************************************************!*\
  !*** /Users/sharknet/Documents/HBuilderProjects/万能工具集/utils/index.js ***!
  \***********************************************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n={copyText:function(t){e.setClipboardData({data:t})},rmbDaXieZhuanHuan:function(e){var t=["角","分"],n=["零","壹","贰","叁","肆","伍","陆","柒","捌","玖"],r=[["元","万","亿"],["","拾","佰","仟"]],o=e<0?"欠":"";e=Math.abs(e);for(var i="",s=0;s<t.length;s++)i+=(n[Math.floor(10*e*Math.pow(10,s))%10]+t[s]).replace(/零./,"");i=i||"整",e=Math.floor(e);for(s=0;s<r[0].length&&e>0;s++){for(var a="",c=0;c<r[1].length&&e>0;c++)a=n[e%10]+r[1][c]+a,e=Math.floor(e/10);i=a.replace(/(零.)*零$/,"").replace(/^$/,"零")+r[0][s]+i}return o+i.replace(/(零.)*零元/,"元").replace(/(零.)+/g,"零").replace(/^整$/,"零元整")},xuankunicheng:function(){}};t.default=n}).call(this,n(/*! ./node_modules/@dcloudio/uni-mp-qq/dist/index.js */1)["default"])},118:
/*!************************************************************************!*\
  !*** /Users/sharknet/Documents/HBuilderProjects/万能工具集/utils/sanwei.js ***!
  \************************************************************************/
/*! no static exports found */function(e,t){e.exports={SanweiResult:function(e){return[{current:!1,done:!1,text:"您的标准胸围: ",desc:Math.round(.535*e)+"cm"},{done:!1,current:!1,text:"您的标准腰围: ",desc:Math.round(.365*e)+"cm"},{done:!1,current:!1,text:"您的标准臀围: ",desc:Math.round(.565*e)+"cm"}]}}},125:
/*!************************************************************************!*\
  !*** /Users/sharknet/Documents/HBuilderProjects/万能工具集/utils/game24.js ***!
  \************************************************************************/
/*! no static exports found */function(e,t){function n(e){if("undefined"===typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=r(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i,s=!0,a=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return s=e.done,e},e:function(e){a=!0,i=e},f:function(){try{s||null==o.return||o.return()}finally{if(a)throw i}}}}function r(e,t){if(e){if("string"===typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(e,t):void 0}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function i(e,t){this.value=e,this.exp=t}e.exports={game24:function(e){var t=[],r=new Set,o=new Map,s=e;function a(){for(var e=0;e<16;e++){var a=new Set;o.set(e,a)}for(e=0;e<4;e++){var u=new i(s[e],s[e]+""),f=new Set;f.add(u),o.set(1<<e,f)}for(e=1;e<16;e++)c(e);var l,p=o.get(15),d=n(p.values());try{for(d.s();!(l=d.n()).done;){var h=l.value;24==h.value&&r.add(h.exp)}}catch(g){d.e(g)}finally{d.f()}if(0==r.size)console.log("It's no possible");else{var v,y=n(r);try{for(y.s();!(v=y.n()).done;){var m=v.value;if(t.push(m),t.length>=10)return t}}catch(g){y.e(g)}finally{y.f()}}return t}function c(e){var t=o.get(e);if(t.size>0)return t;for(var r=1;r<e;r++)if((r&e)==r){var s,a=c(r),u=c(e-r),f=n(a);try{for(f.s();!(s=f.n()).done;){var l,p=s.value,d=n(u);try{for(d.s();!(l=d.n()).done;){var h=l.value,v="("+p.exp+"+"+h.exp+")";t.add(new i(p.value+h.value,v)),v="("+p.exp+"-"+h.exp+")",t.add(new i(p.value-h.value,v)),v="("+p.exp+"*"+h.exp+")",t.add(new i(p.value*h.value,v)),0!=h.value&&(v="("+p.exp+"/"+h.exp+")",t.add(new i(p.value/h.value,v)))}}catch(y){d.e(y)}finally{d.f()}}}catch(y){f.e(y)}finally{f.f()}}return t}return a()}}},168:
/*!***********************************************************************************!*\
  !*** /Users/sharknet/Documents/HBuilderProjects/万能工具集/utils/LunarCalendar.min.js ***!
  \***********************************************************************************/
/*! no static exports found */function(e,t,n){var r;!function(){function o(e){var t=R[e-j];return t[0]}function i(e){for(var t=R[e-j],n=t[0],r=t[3].toString(2),o=r.split(""),i=0;i<16-o.length;i++)o.unshift(0);var s=n?13:12,a=0,c=[];for(i=0;s>i;i++)0==o[i]?(a+=29,c.push(29)):(a+=30,c.push(30));return{yearDays:a,monthDays:c}}function s(e,t){for(var n=i(e),r=t>0?t:n.yearDays-Math.abs(t),o=n.monthDays,s=0,a=0,c=0;c<o.length;c++)if(s+=o[c],s>r){a=c,s-=o[c];break}return[e,a,r-s+1]}function a(e,t,n){var r=R[e-j],o=r[1],i=r[2],a=c(e,o-1,i,e,t,n);if(0==a)return[e,0,1];var u=a>0?e:e-1;return s(u,a)}function c(e,t,n,r,o,i){var s=new Date(e,t,n).getTime(),a=new Date(r,o,i).getTime();return(a-s)/864e5}function u(e,t,n){for(var r=i(e),o=r.monthDays,s=0,a=0;a<o.length&&t>a;a++)s+=o[a];return s+n-1}function f(e,t){var n=new Date(31556925974.7*(e-1890)+6e4*U[t]+Date.UTC(1890,0,5,16,2,31));return n.getUTCDate()}function l(e){for(var t={},n=0,r=0;24>r;r++){var o=f(e,r);r%2==0&&n++,t[P(n-1,o)]=C.solarTerm[r]}return t}function p(e){var t=e-1890+25;return C.zodiac[t%12]}function d(e){return C.heavenlyStems[e%10]+C.earthlyBranches[e%12]}function h(e,t){return t=t||0,d(e-1890+25+t)}function v(e,t,n){return n=n||0,d(12*(e-1890)+t+12+n)}function y(e,t,n){var r=Date.UTC(e,t,n)/864e5+29219+18;return d(r)}function m(e,t){var n=[31,g(e)?29:28,31,30,31,30,31,31,30,31,30,31];return n[t]}function g(e){return e%4==0&&e%100!=0||e%400==0}function _(e,t,n,r){var o=arguments.length,i=new Date;return e=o?parseInt(e,10):i.getFullYear(),t=o?parseInt(t-1,10):i.getMonth(),n=o&&parseInt(n,10)||i.getDate(),(r||j+1)>e||e>I?{error:100,msg:E[100]}:{year:e,month:t,day:n}}function b(e,t,n){var r=_(e,t,n);if(r.error)return r;var o=r.year,i=r.month,s=r.day,a=u(o,i,s),c=R[o-j],f=c[1],l=c[2],p=new Date(o,f-1,l).getTime()+864e5*a;return p=new Date(p),{year:p.getFullYear(),month:p.getMonth()+1,day:p.getDate()}}function w(e,t,n){var r=_(e,t,n,j);if(r.error)return r;var s=r.year,c=r.month,u=r.day;$.setCurrent(s);var d=$.get("term2")?$.get("term2"):$.set("term2",f(s,2)),m=$.get("termList")?$.get("termList"):$.set("termList",l(s)),g=f(s,2*c),b=c>1||1==c&&u>=d?s+1:s,w=u>=g?c+1:c,x=a(s,c,u),O=o(x[0]),A="";A=O>0&&O==x[1]?"闰"+C.monthCn[x[1]-1]+"月":O>0&&x[1]>O?C.monthCn[x[1]-1]+"月":C.monthCn[x[1]]+"月";var S="",k=i(x[0]).monthDays;S=x[1]==k.length-1&&x[2]==k[k.length-1]?M.d0100:O>0&&x[1]>O?M[P(x[1]-1,x[2])]:M[P(x[1],x[2])];var E={zodiac:p(b),GanZhiYear:h(b),GanZhiMonth:v(s,w),GanZhiDay:y(s,c,u),worktime:D["y"+s]&&D["y"+s][P(c,u)]?D["y"+s][P(c,u)]:0,term:m[P(c,u)],lunarYear:x[0],lunarMonth:x[1]+1,lunarDay:x[2],lunarMonthName:A,lunarDayName:C.dateCn[x[2]-1],lunarLeapMonth:O,solarFestival:N[P(c,u)],lunarFestival:S};return E}function x(e,t,n){var r=_(e,t);if(r.error)return r;for(var o=r.year,i=r.month,s=O(o,i+1,n),a=0;a<s.monthData.length;a++){var c=s.monthData[a],u=w(c.year,c.month,c.day);S(s.monthData[a],u)}return s}function O(e,t,n){var r=_(e,t);if(r.error)return r;var o,i,s,a=r.year,c=r.month,u=new Date(a,c,1),f={firstDay:u.getDay(),monthDays:m(a,c),monthData:[]};if(f.monthData=k(a,c+1,f.monthDays,1),n){if(f.firstDay>0){var l=0>c-1?a-1:a,p=0>c-1?11:c-1;o=m(l,p),i=k(l,p+1,f.firstDay,o-f.firstDay+1),f.monthData=i.concat(f.monthData)}if(42-f.monthData.length!=0){var d=c+1>11?a+1:a,h=c+1>11?0:c+1,v=42-f.monthData.length;s=k(d,h+1,v,1),f.monthData=f.monthData.concat(s)}}return f}function A(e){S(D,e)}var S=function(e,t){if(e&&t&&"object"==typeof t)for(var n in t)e[n]=t[n];return e},k=function(e,t,n,r){var o=[];if(r=r||0,1>n)return o;for(var i=r,s=0;n>s;s++)o.push({year:e,month:t,day:i}),i++;return o},E={100:"输入的年份超过了可查询范围，仅支持1891至2100年",101:"参数输入错误，请查阅文档"},T=null,$={current:"",setCurrent:function(e){this.current!=e&&(this.current=e,this.clear())},set:function(e,t){return T||(T={}),T[e]=t,T[e]},get:function(e){return T||(T={}),T[e]},clear:function(){T=null}},P=function(e,t){return e+=1,e=10>e?"0"+e:e,t=10>t?"0"+t:t,"d"+e+t},j=1890,I=2100,C={heavenlyStems:["甲","乙","丙","丁","戊","己","庚","辛","壬","癸"],earthlyBranches:["子","丑","寅","卯","辰","巳","午","未","申","酉","戌","亥"],zodiac:["鼠","牛","虎","兔","龙","蛇","马","羊","猴","鸡","狗","猪"],solarTerm:["小寒","大寒","立春","雨水","惊蛰","春分","清明","谷雨","立夏","小满","芒种","夏至","小暑","大暑","立秋","处暑","白露","秋分","寒露","霜降","立冬","小雪","大雪","冬至"],monthCn:["正","二","三","四","五","六","七","八","九","十","十一","十二"],dateCn:["初一","初二","初三","初四","初五","初六","初七","初八","初九","初十","十一","十二","十三","十四","十五","十六","十七","十八","十九","二十","廿一","廿二","廿三","廿四","廿五","廿六","廿七","廿八","廿九","三十","卅一"]},D={y2013:{d0101:2,d0102:2,d0103:2,d0105:1,d0106:1,d0209:2,d0210:2,d0211:2,d0212:2,d0213:2,d0214:2,d0215:2,d0216:1,d0217:1,d0404:2,d0405:2,d0406:2,d0407:1,d0427:1,d0428:1,d0429:2,d0430:2,d0501:2,d0608:1,d0609:1,d0610:2,d0611:2,d0612:2,d0919:2,d0920:2,d0921:2,d0922:1,d0929:1,d1001:2,d1002:2,d1003:2,d1004:2,d1005:2,d1006:2,d1007:2,d1012:1},y2014:{d0101:2,d0126:1,d0131:2,d0201:2,d0202:2,d0203:2,d0204:2,d0205:2,d0206:2,d0208:1,d0405:2,d0407:2,d0501:2,d0502:2,d0503:2,d0504:1,d0602:2,d0908:2,d0928:1,d1001:2,d1002:2,d1003:2,d1004:2,d1005:2,d1006:2,d1007:2,d1011:1}},N={d0101:"元旦节",d0202:"世界湿地日",d0210:"国际气象节",d0214:"情人节",d0301:"国际海豹日",d0303:"全国爱耳日",d0305:"学雷锋纪念日",d0308:"妇女节",d0312:"植树节 孙中山逝世纪念日",d0314:"国际警察日",d0315:"消费者权益日",d0317:"中国国医节 国际航海日",d0321:"世界森林日 消除种族歧视国际日 世界儿歌日",d0322:"世界水日",d0323:"世界气象日",d0324:"世界防治结核病日",d0325:"全国中小学生安全教育日",d0330:"巴勒斯坦国土日",d0401:"愚人节 全国爱国卫生运动月(四月) 税收宣传月(四月)",d0407:"世界卫生日",d0422:"世界地球日",d0423:"世界图书和版权日",d0424:"亚非新闻工作者日",d0501:"劳动节",d0504:"青年节",d0505:"碘缺乏病防治日",d0508:"世界红十字日",d0512:"国际护士节",d0515:"国际家庭日",d0517:"世界电信日",d0518:"国际博物馆日",d0520:"全国学生营养日",d0522:"国际生物多样性日",d0523:"国际牛奶日",d0531:"世界无烟日",d0601:"国际儿童节",d0605:"世界环境日",d0606:"全国爱眼日",d0617:"防治荒漠化和干旱日",d0623:"国际奥林匹克日",d0625:"全国土地日",d0626:"国际禁毒日",d0701:"香港回归纪念日 中共诞辰 世界建筑日",d0702:"国际体育记者日",d0707:"抗日战争纪念日",d0711:"世界人口日",d0730:"非洲妇女日",d0801:"建军节",d0808:"中国男子节(爸爸节)",d0815:"抗日战争胜利纪念",d0908:"国际扫盲日 国际新闻工作者日",d0909:"毛泽东逝世纪念",d0910:"中国教师节",d0914:"世界清洁地球日",d0916:"国际臭氧层保护日",d0918:"九一八事变纪念日",d0920:"国际爱牙日",d0927:"世界旅游日",d0928:"孔子诞辰",d1001:"国庆节 世界音乐日 国际老人节",d1002:"国际和平与民主自由斗争日",d1004:"世界动物日",d1006:"老人节",d1008:"全国高血压日 世界视觉日",d1009:"世界邮政日 万国邮联日",d1010:"辛亥革命纪念日 世界精神卫生日",d1013:"世界保健日 国际教师节",d1014:"世界标准日",d1015:"国际盲人节(白手杖节)",d1016:"世界粮食日",d1017:"世界消除贫困日",d1022:"世界传统医药日",d1024:"联合国日 世界发展信息日",d1031:"世界勤俭日",d1107:"十月社会主义革命纪念日",d1108:"中国记者日",d1109:"全国消防安全宣传教育日",d1110:"世界青年节",d1111:"国际科学与和平周(本日所属的一周)",d1112:"孙中山诞辰纪念日",d1114:"世界糖尿病日",d1117:"国际大学生节 世界学生节",d1121:"世界问候日 世界电视日",d1129:"国际声援巴勒斯坦人民国际日",d1201:"世界艾滋病日",d1203:"世界残疾人日",d1205:"国际经济和社会发展志愿人员日",d1208:"国际儿童电视日",d1209:"世界足球日",d1210:"世界人权日",d1212:"西安事变纪念日",d1213:"南京大屠杀(1937年)纪念日！紧记血泪史！",d1220:"澳门回归纪念",d1221:"国际篮球日",d1224:"平安夜",d1225:"圣诞节",d1226:"毛泽东诞辰纪念"},M={d0101:"春节",d0115:"元宵节",d0202:"龙抬头节",d0323:"妈祖生辰",d0505:"端午节",d0707:"七夕情人节",d0715:"中元节",d0815:"中秋节",d0909:"重阳节",d1015:"下元节",d1208:"腊八节",d1223:"小年",d0100:"除夕"},R=[[2,1,21,22184],[0,2,9,21936],[6,1,30,9656],[0,2,17,9584],[0,2,6,21168],[5,1,26,43344],[0,2,13,59728],[0,2,2,27296],[3,1,22,44368],[0,2,10,43856],[8,1,30,19304],[0,2,19,19168],[0,2,8,42352],[5,1,29,21096],[0,2,16,53856],[0,2,4,55632],[4,1,25,27304],[0,2,13,22176],[0,2,2,39632],[2,1,22,19176],[0,2,10,19168],[6,1,30,42200],[0,2,18,42192],[0,2,6,53840],[5,1,26,54568],[0,2,14,46400],[0,2,3,54944],[2,1,23,38608],[0,2,11,38320],[7,2,1,18872],[0,2,20,18800],[0,2,8,42160],[5,1,28,45656],[0,2,16,27216],[0,2,5,27968],[4,1,24,44456],[0,2,13,11104],[0,2,2,38256],[2,1,23,18808],[0,2,10,18800],[6,1,30,25776],[0,2,17,54432],[0,2,6,59984],[5,1,26,27976],[0,2,14,23248],[0,2,4,11104],[3,1,24,37744],[0,2,11,37600],[7,1,31,51560],[0,2,19,51536],[0,2,8,54432],[6,1,27,55888],[0,2,15,46416],[0,2,5,22176],[4,1,25,43736],[0,2,13,9680],[0,2,2,37584],[2,1,22,51544],[0,2,10,43344],[7,1,29,46248],[0,2,17,27808],[0,2,6,46416],[5,1,27,21928],[0,2,14,19872],[0,2,3,42416],[3,1,24,21176],[0,2,12,21168],[8,1,31,43344],[0,2,18,59728],[0,2,8,27296],[6,1,28,44368],[0,2,15,43856],[0,2,5,19296],[4,1,25,42352],[0,2,13,42352],[0,2,2,21088],[3,1,21,59696],[0,2,9,55632],[7,1,30,23208],[0,2,17,22176],[0,2,6,38608],[5,1,27,19176],[0,2,15,19152],[0,2,3,42192],[4,1,23,53864],[0,2,11,53840],[8,1,31,54568],[0,2,18,46400],[0,2,7,46752],[6,1,28,38608],[0,2,16,38320],[0,2,5,18864],[4,1,25,42168],[0,2,13,42160],[10,2,2,45656],[0,2,20,27216],[0,2,9,27968],[6,1,29,44448],[0,2,17,43872],[0,2,6,38256],[5,1,27,18808],[0,2,15,18800],[0,2,4,25776],[3,1,23,27216],[0,2,10,59984],[8,1,31,27432],[0,2,19,23232],[0,2,7,43872],[5,1,28,37736],[0,2,16,37600],[0,2,5,51552],[4,1,24,54440],[0,2,12,54432],[0,2,1,55888],[2,1,22,23208],[0,2,9,22176],[7,1,29,43736],[0,2,18,9680],[0,2,7,37584],[5,1,26,51544],[0,2,14,43344],[0,2,3,46240],[4,1,23,46416],[0,2,10,44368],[9,1,31,21928],[0,2,19,19360],[0,2,8,42416],[6,1,28,21176],[0,2,16,21168],[0,2,5,43312],[4,1,25,29864],[0,2,12,27296],[0,2,1,44368],[2,1,22,19880],[0,2,10,19296],[6,1,29,42352],[0,2,17,42208],[0,2,6,53856],[5,1,26,59696],[0,2,13,54576],[0,2,3,23200],[3,1,23,27472],[0,2,11,38608],[11,1,31,19176],[0,2,19,19152],[0,2,8,42192],[6,1,28,53848],[0,2,15,53840],[0,2,4,54560],[5,1,24,55968],[0,2,12,46496],[0,2,1,22224],[2,1,22,19160],[0,2,10,18864],[7,1,30,42168],[0,2,17,42160],[0,2,6,43600],[5,1,26,46376],[0,2,14,27936],[0,2,2,44448],[3,1,23,21936],[0,2,11,37744],[8,2,1,18808],[0,2,19,18800],[0,2,8,25776],[6,1,28,27216],[0,2,15,59984],[0,2,4,27424],[4,1,24,43872],[0,2,12,43744],[0,2,2,37600],[3,1,21,51568],[0,2,9,51552],[7,1,29,54440],[0,2,17,54432],[0,2,5,55888],[5,1,26,23208],[0,2,14,22176],[0,2,3,42704],[4,1,23,21224],[0,2,11,21200],[8,1,31,43352],[0,2,19,43344],[0,2,7,46240],[6,1,27,46416],[0,2,15,44368],[0,2,5,21920],[4,1,24,42448],[0,2,12,42416],[0,2,2,21168],[3,1,22,43320],[0,2,9,26928],[7,1,29,29336],[0,2,17,27296],[0,2,6,44368],[5,1,26,19880],[0,2,14,19296],[0,2,3,42352],[4,1,24,21104],[0,2,10,53856],[8,1,30,59696],[0,2,18,54560],[0,2,7,55968],[6,1,27,27472],[0,2,15,22224],[0,2,5,19168],[4,1,25,42216],[0,2,12,42192],[0,2,1,53584],[2,1,21,55592],[0,2,9,54560]],U=[0,21208,42467,63836,85337,107014,128867,150921,173149,195551,218072,240693,263343,285989,308563,331033,353350,375494,397447,419210,440795,462224,483532,504758],L={solarToLunar:w,lunarToSolar:b,calendar:x,solarCalendar:O,setWorktime:A,getSolarMonthDays:m};r=function(){return L}.call(t,n,t,e),void 0===r||(e.exports=r)}()},181:
/*!****************************************************************************************************************!*\
  !*** /Users/sharknet/Documents/HBuilderProjects/万能工具集/pagesComm/components/vue-calendar-component/calendar.js ***!
  \****************************************************************************************************************/
/*! no static exports found */function(e,t,n){"use strict";function r(e){return a(e)||s(e)||i(e)||o()}function o(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function i(e,t){if(e){if("string"===typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?c(e,t):void 0}}function s(e){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}function a(e){if(Array.isArray(e))return c(e)}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var u={getDaysInOneMonth:function(e){var t=e.getFullYear(),n=e.getMonth()+1,r=new Date(t,n,0);return r.getDate()},getMonthweek:function(e){var t=e.getFullYear(),n=e.getMonth()+1,r=new Date(t+"/"+n+"/1");return this.sundayStart?0==r.getDay()?7:r.getDay():0==r.getDay()?6:r.getDay()-1},getOtherMonth:function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"nextMonth",r=this.dateFormat(e).split("/"),o=r[0],i=r[1],s=r[2],a=o;"nextMonth"===n?(t=parseInt(i)+1,13==t&&(a=parseInt(a)+1,t=1)):(t=parseInt(i)-1,0==t&&(a=parseInt(a)-1,t=12));var c=s,u=new Date(a,t,0).getDate();c>u&&(c=u),t<10&&(t="0"+t),c<10&&(c="0"+c);var f=a+"/"+t+"/"+c;return new Date(f)},getLeftArr:function(e){for(var t=[],n=this.getMonthweek(e),r=this.getDaysInOneMonth(this.getOtherMonth(e,"preMonth"))-n+1,o=this.getOtherMonth(e,"preMonth"),i=0;i<n;i++){var s=o.getFullYear()+"/"+(o.getMonth()+1)+"/"+(r+i);t.push({id:r+i,date:s,isToday:!1,otherMonth:"preMonth"})}return t},getRightArr:function(e){var t=[],n=this.getOtherMonth(e,"nextMonth"),r=this.getDaysInOneMonth(e)+this.getMonthweek(e),o=42-r;console.log(o);for(var i=0;i<o;i++){var s=n.getFullYear()+"/"+(n.getMonth()+1)+"/"+(i+1);t.push({id:i+1,date:s,isToday:!1,otherMonth:"nextMonth"})}return t},dateFormat:function(e){return e="string"===typeof e?new Date(e.replace(/\-/g,"/")):e,e.getFullYear()+"/"+(e.getMonth()+1)+"/"+e.getDate()},getMonthListNoOther:function(e){for(var t=[],n=this.getDaysInOneMonth(e),r=e.getFullYear(),o=e.getMonth()+1,i=this.dateFormat(new Date),s=0;s<n;s++){var a=r+"/"+o+"/"+(s+1);t.push({id:s+1,date:a,isToday:i===a,otherMonth:"nowMonth"})}return t},getMonthList:function(e){return[].concat(r(this.getLeftArr(e)),r(this.getMonthListNoOther(e)),r(this.getRightArr(e)))},sundayStart:!1};t.default=u},2:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),function(e){
/*!
 * Vue.js v2.6.11
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */
var n=Object.freeze({});function r(e){return void 0===e||null===e}function o(e){return void 0!==e&&null!==e}function i(e){return!0===e}function s(e){return!1===e}function a(e){return"string"===typeof e||"number"===typeof e||"symbol"===typeof e||"boolean"===typeof e}function c(e){return null!==e&&"object"===typeof e}var u=Object.prototype.toString;function f(e){return u.call(e).slice(8,-1)}function l(e){return"[object Object]"===u.call(e)}function p(e){return"[object RegExp]"===u.call(e)}function d(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function h(e){return o(e)&&"function"===typeof e.then&&"function"===typeof e.catch}function v(e){return null==e?"":Array.isArray(e)||l(e)&&e.toString===u?JSON.stringify(e,null,2):String(e)}function y(e){var t=parseFloat(e);return isNaN(t)?e:t}function m(e,t){for(var n=Object.create(null),r=e.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var g=m("slot,component",!0),_=m("key,ref,slot,slot-scope,is");function b(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var w=Object.prototype.hasOwnProperty;function x(e,t){return w.call(e,t)}function O(e){var t=Object.create(null);return function(n){var r=t[n];return r||(t[n]=e(n))}}var A=/-(\w)/g,S=O((function(e){return e.replace(A,(function(e,t){return t?t.toUpperCase():""}))})),k=O((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),E=/\B([A-Z])/g,T=O((function(e){return e.replace(E,"-$1").toLowerCase()}));function $(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n}function P(e,t){return e.bind(t)}var j=Function.prototype.bind?P:$;function I(e,t){t=t||0;var n=e.length-t,r=new Array(n);while(n--)r[n]=e[n+t];return r}function C(e,t){for(var n in t)e[n]=t[n];return e}function D(e){for(var t={},n=0;n<e.length;n++)e[n]&&C(t,e[n]);return t}function N(e,t,n){}var M=function(e,t,n){return!1},R=function(e){return e};function U(e,t){if(e===t)return!0;var n=c(e),r=c(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{var o=Array.isArray(e),i=Array.isArray(t);if(o&&i)return e.length===t.length&&e.every((function(e,n){return U(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(o||i)return!1;var s=Object.keys(e),a=Object.keys(t);return s.length===a.length&&s.every((function(n){return U(e[n],t[n])}))}catch(u){return!1}}function L(e,t){for(var n=0;n<e.length;n++)if(U(e[n],t))return n;return-1}function q(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var F=["component","directive","filter"],K=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],V={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:M,isReservedAttr:M,isUnknownElement:M,getTagNamespace:N,parsePlatformTagName:R,mustUseProp:M,async:!0,_lifecycleHooks:K},B=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function G(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var Y=new RegExp("[^"+B.source+".$_\\d]");function z(e){if(!Y.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}var W,J="__proto__"in{},X="undefined"!==typeof window,Q="undefined"!==typeof WXEnvironment&&!!WXEnvironment.platform,Z=Q&&WXEnvironment.platform.toLowerCase(),ee=X&&window.navigator.userAgent.toLowerCase(),te=ee&&/msie|trident/.test(ee),ne=(ee&&ee.indexOf("msie 9.0"),ee&&ee.indexOf("edge/")>0),re=(ee&&ee.indexOf("android"),ee&&/iphone|ipad|ipod|ios/.test(ee)||"ios"===Z),oe=(ee&&/chrome\/\d+/.test(ee),ee&&/phantomjs/.test(ee),ee&&ee.match(/firefox\/(\d+)/),{}.watch);if(X)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){}}),window.addEventListener("test-passive",null,ie)}catch(Mo){}var se=function(){return void 0===W&&(W=!X&&!Q&&"undefined"!==typeof e&&(e["process"]&&"server"===e["process"].env.VUE_ENV)),W},ae=X&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ce(e){return"function"===typeof e&&/native code/.test(e.toString())}var ue,fe="undefined"!==typeof Symbol&&ce(Symbol)&&"undefined"!==typeof Reflect&&ce(Reflect.ownKeys);ue="undefined"!==typeof Set&&ce(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var le=N,pe=N,de=N,he=N,ve="undefined"!==typeof console,ye=/(?:^|[-_])(\w)/g,me=function(e){return e.replace(ye,(function(e){return e.toUpperCase()})).replace(/[-_]/g,"")};le=function(e,t){var n=t?de(t):"";V.warnHandler?V.warnHandler.call(null,e,t,n):ve&&!V.silent&&console.error("[Vue warn]: "+e+n)},pe=function(e,t){ve&&!V.silent&&console.warn("[Vue tip]: "+e+(t?de(t):""))},he=function(e,t){if(e.$root===e)return e.$options&&e.$options.__file?""+e.$options.__file:"<Root>";var n="function"===typeof e&&null!=e.cid?e.options:e._isVue?e.$options||e.constructor.options:e,r=n.name||n._componentTag,o=n.__file;if(!r&&o){var i=o.match(/([^/\\]+)\.vue$/);r=i&&i[1]}return(r?"<"+me(r)+">":"<Anonymous>")+(o&&!1!==t?" at "+o:"")};var ge=function(e,t){var n="";while(t)t%2===1&&(n+=e),t>1&&(e+=e),t>>=1;return n};de=function(e){if(e._isVue&&e.$parent){var t=[],n=0;while(e&&"PageBody"!==e.$options.name){if(t.length>0){var r=t[t.length-1];if(r.constructor===e.constructor){n++,e=e.$parent;continue}n>0&&(t[t.length-1]=[r,n],n=0)}!e.$options.isReserved&&t.push(e),e=e.$parent}return"\n\nfound in\n\n"+t.map((function(e,t){return""+(0===t?"---\x3e ":ge(" ",5+2*t))+(Array.isArray(e)?he(e[0])+"... ("+e[1]+" recursive calls)":he(e))})).join("\n")}return"\n\n(found in "+he(e)+")"};var _e=0,be=function(){"undefined"!==typeof SharedObject?this.id=SharedObject.uid++:this.id=_e++,this.subs=[]};function we(e){be.SharedObject.targetStack.push(e),be.SharedObject.target=e}function xe(){be.SharedObject.targetStack.pop(),be.SharedObject.target=be.SharedObject.targetStack[be.SharedObject.targetStack.length-1]}be.prototype.addSub=function(e){this.subs.push(e)},be.prototype.removeSub=function(e){b(this.subs,e)},be.prototype.depend=function(){be.SharedObject.target&&be.SharedObject.target.addDep(this)},be.prototype.notify=function(){var e=this.subs.slice();V.async||e.sort((function(e,t){return e.id-t.id}));for(var t=0,n=e.length;t<n;t++)e[t].update()},be.SharedObject="undefined"!==typeof SharedObject?SharedObject:{},be.SharedObject.target=null,be.SharedObject.targetStack=[];var Oe=function(e,t,n,r,o,i,s,a){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=s,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=a,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},Ae={child:{configurable:!0}};Ae.child.get=function(){return this.componentInstance},Object.defineProperties(Oe.prototype,Ae);var Se=function(e){void 0===e&&(e="");var t=new Oe;return t.text=e,t.isComment=!0,t};function ke(e){return new Oe(void 0,void 0,void 0,String(e))}function Ee(e){var t=new Oe(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var Te=Array.prototype,$e=Object.create(Te),Pe=["push","pop","shift","unshift","splice","sort","reverse"];Pe.forEach((function(e){var t=Te[e];G($e,e,(function(){var n=[],r=arguments.length;while(r--)n[r]=arguments[r];var o,i=t.apply(this,n),s=this.__ob__;switch(e){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2);break}return o&&s.observeArray(o),s.dep.notify(),i}))}));var je=Object.getOwnPropertyNames($e),Ie=!0;function Ce(e){Ie=e}var De=function(e){this.value=e,this.dep=new be,this.vmCount=0,G(e,"__ob__",this),Array.isArray(e)?(J?e.push!==e.__proto__.push?Me(e,$e,je):Ne(e,$e):Me(e,$e,je),this.observeArray(e)):this.walk(e)};function Ne(e,t){e.__proto__=t}function Me(e,t,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];G(e,i,t[i])}}function Re(e,t){var n;if(c(e)&&!(e instanceof Oe))return x(e,"__ob__")&&e.__ob__ instanceof De?n=e.__ob__:Ie&&!se()&&(Array.isArray(e)||l(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new De(e)),t&&n&&n.vmCount++,n}function Ue(e,t,n,r,o){var i=new be,s=Object.getOwnPropertyDescriptor(e,t);if(!s||!1!==s.configurable){var a=s&&s.get,c=s&&s.set;a&&!c||2!==arguments.length||(n=e[t]);var u=!o&&Re(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=a?a.call(e):n;return be.SharedObject.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(t)&&Fe(t))),t},set:function(t){var s=a?a.call(e):n;t===s||t!==t&&s!==s||(r&&r(),a&&!c||(c?c.call(e,t):n=t,u=!o&&Re(t),i.notify()))}})}}function Le(e,t,n){if((r(e)||a(e))&&le("Cannot set reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&d(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var o=e.__ob__;return e._isVue||o&&o.vmCount?(le("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):o?(Ue(o.value,t,n),o.dep.notify(),n):(e[t]=n,n)}function qe(e,t){if((r(e)||a(e))&&le("Cannot delete reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&d(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount?le("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):x(e,t)&&(delete e[t],n&&n.dep.notify())}}function Fe(e){for(var t=void 0,n=0,r=e.length;n<r;n++)t=e[n],t&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&Fe(t)}De.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Ue(e,t[n])},De.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Re(e[t])};var Ke=V.optionMergeStrategies;function Ve(e,t){if(!t)return e;for(var n,r,o,i=fe?Reflect.ownKeys(t):Object.keys(t),s=0;s<i.length;s++)n=i[s],"__ob__"!==n&&(r=e[n],o=t[n],x(e,n)?r!==o&&l(r)&&l(o)&&Ve(r,o):Le(e,n,o));return e}function Be(e,t,n){return n?function(){var r="function"===typeof t?t.call(n,n):t,o="function"===typeof e?e.call(n,n):e;return r?Ve(r,o):o}:t?e?function(){return Ve("function"===typeof t?t.call(this,this):t,"function"===typeof e?e.call(this,this):e)}:t:e}function He(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?Ge(n):n}function Ge(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}function Ye(e,t,n,r){var o=Object.create(e||null);return t?(et(r,t,n),C(o,t)):o}Ke.el=Ke.propsData=function(e,t,n,r){return n||le('option "'+r+'" can only be used during instance creation with the `new` keyword.'),ze(e,t)},Ke.data=function(e,t,n){return n?Be(e,t,n):t&&"function"!==typeof t?(le('The "data" option should be a function that returns a per-instance value in component definitions.',n),e):Be(e,t)},K.forEach((function(e){Ke[e]=He})),F.forEach((function(e){Ke[e+"s"]=Ye})),Ke.watch=function(e,t,n,r){if(e===oe&&(e=void 0),t===oe&&(t=void 0),!t)return Object.create(e||null);if(et(r,t,n),!e)return t;var o={};for(var i in C(o,e),t){var s=o[i],a=t[i];s&&!Array.isArray(s)&&(s=[s]),o[i]=s?s.concat(a):Array.isArray(a)?a:[a]}return o},Ke.props=Ke.methods=Ke.inject=Ke.computed=function(e,t,n,r){if(t&&et(r,t,n),!e)return t;var o=Object.create(null);return C(o,e),t&&C(o,t),o},Ke.provide=Be;var ze=function(e,t){return void 0===t?e:t};function We(e){for(var t in e.components)Je(t)}function Je(e){new RegExp("^[a-zA-Z][\\-\\.0-9_"+B.source+"]*$").test(e)||le('Invalid component name: "'+e+'". Component names should conform to valid custom element name in html5 specification.'),(g(e)||V.isReservedTag(e))&&le("Do not use built-in or reserved HTML elements as component id: "+e)}function Xe(e,t){var n=e.props;if(n){var r,o,i,s={};if(Array.isArray(n)){r=n.length;while(r--)o=n[r],"string"===typeof o?(i=S(o),s[i]={type:null}):le("props must be strings when using array syntax.")}else if(l(n))for(var a in n)o=n[a],i=S(a),s[i]=l(o)?o:{type:o};else le('Invalid value for option "props": expected an Array or an Object, but got '+f(n)+".",t);e.props=s}}function Qe(e,t){var n=e.inject;if(n){var r=e.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(l(n))for(var i in n){var s=n[i];r[i]=l(s)?C({from:i},s):{from:s}}else le('Invalid value for option "inject": expected an Array or an Object, but got '+f(n)+".",t)}}function Ze(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"===typeof r&&(t[n]={bind:r,update:r})}}function et(e,t,n){l(t)||le('Invalid value for option "'+e+'": expected an Object, but got '+f(t)+".",n)}function tt(e,t,n){if(We(t),"function"===typeof t&&(t=t.options),Xe(t,n),Qe(t,n),Ze(t),!t._base&&(t.extends&&(e=tt(e,t.extends,n)),t.mixins))for(var r=0,o=t.mixins.length;r<o;r++)e=tt(e,t.mixins[r],n);var i,s={};for(i in e)a(i);for(i in t)x(e,i)||a(i);function a(r){var o=Ke[r]||ze;s[r]=o(e[r],t[r],n,r)}return s}function nt(e,t,n,r){if("string"===typeof n){var o=e[t];if(x(o,n))return o[n];var i=S(n);if(x(o,i))return o[i];var s=k(i);if(x(o,s))return o[s];var a=o[n]||o[i]||o[s];return r&&!a&&le("Failed to resolve "+t.slice(0,-1)+": "+n,e),a}}function rt(e,t,n,r){var o=t[e],i=!x(n,e),s=n[e],a=ft(Boolean,o.type);if(a>-1)if(i&&!x(o,"default"))s=!1;else if(""===s||s===T(e)){var c=ft(String,o.type);(c<0||a<c)&&(s=!0)}if(void 0===s){s=ot(r,o,e);var u=Ie;Ce(!0),Re(s),Ce(u)}return it(o,e,s,r,i),s}function ot(e,t,n){if(x(t,"default")){var r=t.default;return c(r)&&le('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',e),e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n]?e._props[n]:"function"===typeof r&&"Function"!==ct(t.type)?r.call(e):r}}function it(e,t,n,r,o){if(e.required&&o)le('Missing required prop: "'+t+'"',r);else if(null!=n||e.required){var i=e.type,s=!i||!0===i,a=[];if(i){Array.isArray(i)||(i=[i]);for(var c=0;c<i.length&&!s;c++){var u=at(n,i[c]);a.push(u.expectedType||""),s=u.valid}}if(s){var f=e.validator;f&&(f(n)||le('Invalid prop: custom validator check failed for prop "'+t+'".',r))}else le(lt(t,n,a),r)}}var st=/^(String|Number|Boolean|Function|Symbol)$/;function at(e,t){var n,r=ct(t);if(st.test(r)){var o=typeof e;n=o===r.toLowerCase(),n||"object"!==o||(n=e instanceof t)}else n="Object"===r?l(e):"Array"===r?Array.isArray(e):e instanceof t;return{valid:n,expectedType:r}}function ct(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function ut(e,t){return ct(e)===ct(t)}function ft(e,t){if(!Array.isArray(t))return ut(t,e)?0:-1;for(var n=0,r=t.length;n<r;n++)if(ut(t[n],e))return n;return-1}function lt(e,t,n){var r='Invalid prop: type check failed for prop "'+e+'". Expected '+n.map(k).join(", "),o=n[0],i=f(t),s=pt(t,o),a=pt(t,i);return 1===n.length&&dt(o)&&!ht(o,i)&&(r+=" with value "+s),r+=", got "+i+" ",dt(i)&&(r+="with value "+a+"."),r}function pt(e,t){return"String"===t?'"'+e+'"':"Number"===t?""+Number(e):""+e}function dt(e){var t=["string","number","boolean"];return t.some((function(t){return e.toLowerCase()===t}))}function ht(){var e=[],t=arguments.length;while(t--)e[t]=arguments[t];return e.some((function(e){return"boolean"===e.toLowerCase()}))}function vt(e,t,n){we();try{if(t){var r=t;while(r=r.$parent){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{var s=!1===o[i].call(r,e,t,n);if(s)return}catch(Mo){mt(Mo,r,"errorCaptured hook")}}}mt(e,t,n)}finally{xe()}}function yt(e,t,n,r,o){var i;try{i=n?e.apply(t,n):e.call(t),i&&!i._isVue&&h(i)&&!i._handled&&(i.catch((function(e){return vt(e,r,o+" (Promise/async)")})),i._handled=!0)}catch(Mo){vt(Mo,r,o)}return i}function mt(e,t,n){if(V.errorHandler)try{return V.errorHandler.call(null,e,t,n)}catch(Mo){Mo!==e&&gt(Mo,null,"config.errorHandler")}gt(e,t,n)}function gt(e,t,n){if(le("Error in "+n+': "'+e.toString()+'"',t),!X&&!Q||"undefined"===typeof console)throw e;console.error(e)}var _t,bt,wt=[],xt=!1;function Ot(){xt=!1;var e=wt.slice(0);wt.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!==typeof Promise&&ce(Promise)){var At=Promise.resolve();_t=function(){At.then(Ot),re&&setTimeout(N)}}else if(te||"undefined"===typeof MutationObserver||!ce(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())_t="undefined"!==typeof setImmediate&&ce(setImmediate)?function(){setImmediate(Ot)}:function(){setTimeout(Ot,0)};else{var St=1,kt=new MutationObserver(Ot),Et=document.createTextNode(String(St));kt.observe(Et,{characterData:!0}),_t=function(){St=(St+1)%2,Et.data=String(St)}}function Tt(e,t){var n;if(wt.push((function(){if(e)try{e.call(t)}catch(Mo){vt(Mo,t,"nextTick")}else n&&n(t)})),xt||(xt=!0,_t()),!e&&"undefined"!==typeof Promise)return new Promise((function(e){n=e}))}var $t=m("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),Pt=function(e,t){le('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',e)},jt=function(e,t){le('Property "'+t+'" must be accessed with "$data.'+t+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://vuejs.org/v2/api/#data',e)},It="undefined"!==typeof Proxy&&ce(Proxy);if(It){var Ct=m("stop,prevent,self,ctrl,shift,alt,meta,exact");V.keyCodes=new Proxy(V.keyCodes,{set:function(e,t,n){return Ct(t)?(le("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=n,!0)}})}var Dt={has:function(e,t){var n=t in e,r=$t(t)||"string"===typeof t&&"_"===t.charAt(0)&&!(t in e.$data);return n||r||(t in e.$data?jt(e,t):Pt(e,t)),n||!r}},Nt={get:function(e,t){return"string"!==typeof t||t in e||(t in e.$data?jt(e,t):Pt(e,t)),e[t]}};bt=function(e){if(It){var t=e.$options,n=t.render&&t.render._withStripped?Nt:Dt;e._renderProxy=new Proxy(e,n)}else e._renderProxy=e};var Mt,Rt,Ut=new ue;function Lt(e){qt(e,Ut),Ut.clear()}function qt(e,t){var n,r,o=Array.isArray(e);if(!(!o&&!c(e)||Object.isFrozen(e)||e instanceof Oe)){if(e.__ob__){var i=e.__ob__.dep.id;if(t.has(i))return;t.add(i)}if(o){n=e.length;while(n--)qt(e[n],t)}else{r=Object.keys(e),n=r.length;while(n--)qt(e[r[n]],t)}}}var Ft=X&&window.performance;Ft&&Ft.mark&&Ft.measure&&Ft.clearMarks&&Ft.clearMeasures&&(Mt=function(e){return Ft.mark(e)},Rt=function(e,t,n){Ft.measure(e,t,n),Ft.clearMarks(t),Ft.clearMarks(n)});var Kt=O((function(e){var t="&"===e.charAt(0);e=t?e.slice(1):e;var n="~"===e.charAt(0);e=n?e.slice(1):e;var r="!"===e.charAt(0);return e=r?e.slice(1):e,{name:e,once:n,capture:r,passive:t}}));function Vt(e,t){function n(){var e=arguments,r=n.fns;if(!Array.isArray(r))return yt(r,null,arguments,t,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)yt(o[i],null,e,t,"v-on handler")}return n.fns=e,n}function Bt(e,t,n,o,s,a){var c,u,f,l;for(c in e)u=e[c],f=t[c],l=Kt(c),r(u)?le('Invalid handler for event "'+l.name+'": got '+String(u),a):r(f)?(r(u.fns)&&(u=e[c]=Vt(u,a)),i(l.once)&&(u=e[c]=s(l.name,u,l.capture)),n(l.name,u,l.capture,l.passive,l.params)):u!==f&&(f.fns=u,e[c]=f);for(c in t)r(e[c])&&(l=Kt(c),o(l.name,t[c],l.capture))}function Ht(e,t,n,i){var s=t.options.mpOptions&&t.options.mpOptions.properties;if(r(s))return n;var a=t.options.mpOptions.externalClasses||[],c=e.attrs,u=e.props;if(o(c)||o(u))for(var f in s){var l=T(f),p=Yt(n,u,f,l,!0)||Yt(n,c,f,l,!1);p&&n[f]&&-1!==a.indexOf(l)&&i[S(n[f])]&&(n[f]=i[S(n[f])])}return n}function Gt(e,t,n,i){var s=t.options.props;if(r(s))return Ht(e,t,{},i);var a={},c=e.attrs,u=e.props;if(o(c)||o(u))for(var f in s){var l=T(f),p=f.toLowerCase();f!==p&&c&&x(c,p)&&pe('Prop "'+p+'" is passed to component '+he(n||t)+', but the declared prop name is "'+f+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+l+'" instead of "'+f+'".'),Yt(a,u,f,l,!0)||Yt(a,c,f,l,!1)}return Ht(e,t,a,i)}function Yt(e,t,n,r,i){if(o(t)){if(x(t,n))return e[n]=t[n],i||delete t[n],!0;if(x(t,r))return e[n]=t[r],i||delete t[r],!0}return!1}function zt(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}function Wt(e){return a(e)?[ke(e)]:Array.isArray(e)?Xt(e):void 0}function Jt(e){return o(e)&&o(e.text)&&s(e.isComment)}function Xt(e,t){var n,s,c,u,f=[];for(n=0;n<e.length;n++)s=e[n],r(s)||"boolean"===typeof s||(c=f.length-1,u=f[c],Array.isArray(s)?s.length>0&&(s=Xt(s,(t||"")+"_"+n),Jt(s[0])&&Jt(u)&&(f[c]=ke(u.text+s[0].text),s.shift()),f.push.apply(f,s)):a(s)?Jt(u)?f[c]=ke(u.text+s):""!==s&&f.push(ke(s)):Jt(s)&&Jt(u)?f[c]=ke(u.text+s.text):(i(e._isVList)&&o(s.tag)&&r(s.key)&&o(t)&&(s.key="__vlist"+t+"_"+n+"__"),f.push(s)));return f}function Qt(e){var t=e.$options.provide;t&&(e._provided="function"===typeof t?t.call(e):t)}function Zt(e){var t=en(e.$options.inject,e);t&&(Ce(!1),Object.keys(t).forEach((function(n){Ue(e,n,t[n],(function(){le('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',e)}))})),Ce(!0))}function en(e,t){if(e){for(var n=Object.create(null),r=fe?Reflect.ownKeys(e):Object.keys(e),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){var s=e[i].from,a=t;while(a){if(a._provided&&x(a._provided,s)){n[i]=a._provided[s];break}a=a.$parent}if(!a)if("default"in e[i]){var c=e[i].default;n[i]="function"===typeof c?c.call(t):c}else le('Injection "'+i+'" not found',t)}}return n}}function tn(e,t){if(!e||!e.length)return{};for(var n={},r=0,o=e.length;r<o;r++){var i=e[r],s=i.data;if(s&&s.attrs&&s.attrs.slot&&delete s.attrs.slot,i.context!==t&&i.fnContext!==t||!s||null==s.slot)i.asyncMeta&&i.asyncMeta.data&&"page"===i.asyncMeta.data.slot?(n["page"]||(n["page"]=[])).push(i):(n.default||(n.default=[])).push(i);else{var a=s.slot,c=n[a]||(n[a]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in n)n[u].every(nn)&&delete n[u];return n}function nn(e){return e.isComment&&!e.asyncFactory||" "===e.text}function rn(e,t,r){var o,i=Object.keys(t).length>0,s=e?!!e.$stable:!i,a=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(s&&r&&r!==n&&a===r.$key&&!i&&!r.$hasNormal)return r;for(var c in o={},e)e[c]&&"$"!==c[0]&&(o[c]=on(t,c,e[c]))}else o={};for(var u in t)u in o||(o[u]=sn(t,u));return e&&Object.isExtensible(e)&&(e._normalized=o),G(o,"$stable",s),G(o,"$key",a),G(o,"$hasNormal",i),o}function on(e,t,n){var r=function(){var e=arguments.length?n.apply(null,arguments):n({});return e=e&&"object"===typeof e&&!Array.isArray(e)?[e]:Wt(e),e&&(0===e.length||1===e.length&&e[0].isComment)?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:r,enumerable:!0,configurable:!0}),r}function sn(e,t){return function(){return e[t]}}function an(e,t){var n,r,i,s,a;if(Array.isArray(e)||"string"===typeof e)for(n=new Array(e.length),r=0,i=e.length;r<i;r++)n[r]=t(e[r],r,r,r);else if("number"===typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r,r,r);else if(c(e))if(fe&&e[Symbol.iterator]){n=[];var u=e[Symbol.iterator](),f=u.next();while(!f.done)n.push(t(f.value,n.length,r++,r)),f=u.next()}else for(s=Object.keys(e),n=new Array(s.length),r=0,i=s.length;r<i;r++)a=s[r],n[r]=t(e[a],a,r,r);return o(n)||(n=[]),n._isVList=!0,n}function cn(e,t,n,r){var o,i=this.$scopedSlots[e];i?(n=n||{},r&&(c(r)||le("slot v-bind without argument expects an Object",this),n=C(C({},r),n)),o=i(n,this,n._i)||t):o=this.$slots[e]||t;var s=n&&n.slot;return s?this.$createElement("template",{slot:s},o):o}function un(e){return nt(this.$options,"filters",e,!0)||R}function fn(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function ln(e,t,n,r,o){var i=V.keyCodes[t]||n;return o&&r&&!V.keyCodes[t]?fn(o,r):i?fn(i,e):r?T(r)!==t:void 0}function pn(e,t,n,r,o){if(n)if(c(n)){var i;Array.isArray(n)&&(n=D(n));var s=function(s){if("class"===s||"style"===s||_(s))i=e;else{var a=e.attrs&&e.attrs.type;i=r||V.mustUseProp(t,a,s)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var c=S(s),u=T(s);if(!(c in i)&&!(u in i)&&(i[s]=n[s],o)){var f=e.on||(e.on={});f["update:"+s]=function(e){n[s]=e}}};for(var a in n)s(a)}else le("v-bind without argument expects an Object or Array value",this);return e}function dn(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t?r:(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),vn(r,"__static__"+e,!1),r)}function hn(e,t,n){return vn(e,"__once__"+t+(n?"_"+n:""),!0),e}function vn(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!==typeof e[r]&&yn(e[r],t+"_"+r,n);else yn(e,t,n)}function yn(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function mn(e,t){if(t)if(l(t)){var n=e.on=e.on?C({},e.on):{};for(var r in t){var o=n[r],i=t[r];n[r]=o?[].concat(o,i):i}}else le("v-on without argument expects an Object value",this);return e}function gn(e,t,n,r){t=t||{$stable:!n};for(var o=0;o<e.length;o++){var i=e[o];Array.isArray(i)?gn(i,t,n):i&&(i.proxy&&(i.fn.proxy=!0),t[i.key]=i.fn)}return r&&(t.$key=r),t}function _n(e,t){for(var n=0;n<t.length;n+=2){var r=t[n];"string"===typeof r&&r?e[t[n]]=t[n+1]:""!==r&&null!==r&&le("Invalid value for dynamic directive argument (expected string or null): "+r,this)}return e}function bn(e,t){return"string"===typeof e?t+e:e}function wn(e){e._o=hn,e._n=y,e._s=v,e._l=an,e._t=cn,e._q=U,e._i=L,e._m=dn,e._f=un,e._k=ln,e._b=pn,e._v=ke,e._e=Se,e._u=gn,e._g=mn,e._d=_n,e._p=bn}function xn(e,t,r,o,s){var a,c=this,u=s.options;x(o,"_uid")?(a=Object.create(o),a._original=o):(a=o,o=o._original);var f=i(u._compiled),l=!f;this.data=e,this.props=t,this.children=r,this.parent=o,this.listeners=e.on||n,this.injections=en(u.inject,o),this.slots=function(){return c.$slots||rn(e.scopedSlots,c.$slots=tn(r,o)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return rn(e.scopedSlots,this.slots())}}),f&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=rn(e.scopedSlots,this.$slots)),u._scopeId?this._c=function(e,t,n,r){var i=Nn(a,e,t,n,r,l);return i&&!Array.isArray(i)&&(i.fnScopeId=u._scopeId,i.fnContext=o),i}:this._c=function(e,t,n,r){return Nn(a,e,t,n,r,l)}}function On(e,t,r,i,s){var a=e.options,c={},u=a.props;if(o(u))for(var f in u)c[f]=rt(f,u,t||n);else o(r.attrs)&&Sn(c,r.attrs),o(r.props)&&Sn(c,r.props);var l=new xn(r,c,s,i,e),p=a.render.call(null,l._c,l);if(p instanceof Oe)return An(p,r,l.parent,a,l);if(Array.isArray(p)){for(var d=Wt(p)||[],h=new Array(d.length),v=0;v<d.length;v++)h[v]=An(d[v],r,l.parent,a,l);return h}}function An(e,t,n,r,o){var i=Ee(e);return i.fnContext=n,i.fnOptions=r,(i.devtoolsMeta=i.devtoolsMeta||{}).renderContext=o,t.slot&&((i.data||(i.data={})).slot=t.slot),i}function Sn(e,t){for(var n in t)e[S(n)]=t[n]}wn(xn.prototype);var kn={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;kn.prepatch(n,n)}else{var r=e.componentInstance=$n(e,er);r.$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions,r=t.componentInstance=e.componentInstance;ir(r,n.propsData,n.listeners,t,n.children)},insert:function(e){var t=e.context,n=e.componentInstance;n._isMounted||(ur(n,"onServiceCreated"),ur(n,"onServiceAttached"),n._isMounted=!0,ur(n,"mounted")),e.data.keepAlive&&(t._isMounted?Or(n):ar(n,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?cr(t,!0):t.$destroy())}},En=Object.keys(kn);function Tn(e,t,n,s,a){if(!r(e)){var u=n.$options._base;if(c(e)&&(e=u.extend(e)),"function"===typeof e){var f;if(r(e.cid)&&(f=e,e=Hn(f,u),void 0===e))return Bn(f,t,n,s,a);t=t||{},Gr(e),o(t.model)&&In(e.options,t);var l=Gt(t,e,a,n);if(i(e.options.functional))return On(e,l,t,n,s);var p=t.on;if(t.on=t.nativeOn,i(e.options.abstract)){var d=t.slot;t={},d&&(t.slot=d)}Pn(t);var h=e.options.name||a,v=new Oe("vue-component-"+e.cid+(h?"-"+h:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:l,listeners:p,tag:a,children:s},f);return v}le("Invalid Component definition: "+String(e),n)}}function $n(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},r=e.data.inlineTemplate;return o(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new e.componentOptions.Ctor(n)}function Pn(e){for(var t=e.hook||(e.hook={}),n=0;n<En.length;n++){var r=En[n],o=t[r],i=kn[r];o===i||o&&o._merged||(t[r]=o?jn(i,o):i)}}function jn(e,t){var n=function(n,r){e(n,r),t(n,r)};return n._merged=!0,n}function In(e,t){var n=e.model&&e.model.prop||"value",r=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var i=t.on||(t.on={}),s=i[r],a=t.model.callback;o(s)?(Array.isArray(s)?-1===s.indexOf(a):s!==a)&&(i[r]=[a].concat(s)):i[r]=a}var Cn=1,Dn=2;function Nn(e,t,n,r,o,s){return(Array.isArray(n)||a(n))&&(o=r,r=n,n=void 0),i(s)&&(o=Dn),Mn(e,t,n,r,o)}function Mn(e,t,n,r,i){if(o(n)&&o(n.__ob__))return le("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",e),Se();if(o(n)&&o(n.is)&&(t=n.is),!t)return Se();var s,c,u;(o(n)&&o(n.key)&&!a(n.key)&&le("Avoid using non-primitive value as key, use string/number value instead.",e),Array.isArray(r)&&"function"===typeof r[0]&&(n=n||{},n.scopedSlots={default:r[0]},r.length=0),i===Dn?r=Wt(r):i===Cn&&(r=zt(r)),"string"===typeof t)?(c=e.$vnode&&e.$vnode.ns||V.getTagNamespace(t),V.isReservedTag(t)?(o(n)&&o(n.nativeOn)&&le("The .native modifier for v-on is only valid on components but it was used on <"+t+">.",e),s=new Oe(V.parsePlatformTagName(t),n,r,void 0,void 0,e)):s=n&&n.pre||!o(u=nt(e.$options,"components",t))?new Oe(t,n,r,void 0,void 0,e):Tn(u,n,e,r,t)):s=Tn(t,n,e,r);return Array.isArray(s)?s:o(s)?(o(c)&&Rn(s,c),o(n)&&Un(n),s):Se()}function Rn(e,t,n){if(e.ns=t,"foreignObject"===e.tag&&(t=void 0,n=!0),o(e.children))for(var s=0,a=e.children.length;s<a;s++){var c=e.children[s];o(c.tag)&&(r(c.ns)||i(n)&&"svg"!==c.tag)&&Rn(c,t,n)}}function Un(e){c(e.style)&&Lt(e.style),c(e.class)&&Lt(e.class)}function Ln(e){e._vnode=null,e._staticTrees=null;var t=e.$options,r=e.$vnode=t._parentVnode,o=r&&r.context;e.$slots=tn(t._renderChildren,o),e.$scopedSlots=n,e._c=function(t,n,r,o){return Nn(e,t,n,r,o,!1)},e.$createElement=function(t,n,r,o){return Nn(e,t,n,r,o,!0)};var i=r&&r.data;Ue(e,"$attrs",i&&i.attrs||n,(function(){!tr&&le("$attrs is readonly.",e)}),!0),Ue(e,"$listeners",t._parentListeners||n,(function(){!tr&&le("$listeners is readonly.",e)}),!0)}var qn,Fn=null;function Kn(e){wn(e.prototype),e.prototype.$nextTick=function(e){return Tt(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,r=n.render,o=n._parentVnode;o&&(t.$scopedSlots=rn(o.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=o;try{Fn=t,e=r.call(t._renderProxy,t.$createElement)}catch(Mo){if(vt(Mo,t,"render"),t.$options.renderError)try{e=t.$options.renderError.call(t._renderProxy,t.$createElement,Mo)}catch(Mo){vt(Mo,t,"renderError"),e=t._vnode}else e=t._vnode}finally{Fn=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof Oe||(Array.isArray(e)&&le("Multiple root nodes returned from render function. Render function should return a single root node.",t),e=Se()),e.parent=o,e}}function Vn(e,t){return(e.__esModule||fe&&"Module"===e[Symbol.toStringTag])&&(e=e.default),c(e)?t.extend(e):e}function Bn(e,t,n,r,o){var i=Se();return i.asyncFactory=e,i.asyncMeta={data:t,context:n,children:r,tag:o},i}function Hn(e,t){if(i(e.error)&&o(e.errorComp))return e.errorComp;if(o(e.resolved))return e.resolved;var n=Fn;if(n&&o(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n),i(e.loading)&&o(e.loadingComp))return e.loadingComp;if(n&&!o(e.owners)){var s=e.owners=[n],a=!0,u=null,f=null;n.$on("hook:destroyed",(function(){return b(s,n)}));var l=function(e){for(var t=0,n=s.length;t<n;t++)s[t].$forceUpdate();e&&(s.length=0,null!==u&&(clearTimeout(u),u=null),null!==f&&(clearTimeout(f),f=null))},p=q((function(n){e.resolved=Vn(n,t),a?s.length=0:l(!0)})),d=q((function(t){le("Failed to resolve async component: "+String(e)+(t?"\nReason: "+t:"")),o(e.errorComp)&&(e.error=!0,l(!0))})),v=e(p,d);return c(v)&&(h(v)?r(e.resolved)&&v.then(p,d):h(v.component)&&(v.component.then(p,d),o(v.error)&&(e.errorComp=Vn(v.error,t)),o(v.loading)&&(e.loadingComp=Vn(v.loading,t),0===v.delay?e.loading=!0:u=setTimeout((function(){u=null,r(e.resolved)&&r(e.error)&&(e.loading=!0,l(!1))}),v.delay||200)),o(v.timeout)&&(f=setTimeout((function(){f=null,r(e.resolved)&&d("timeout ("+v.timeout+"ms)")}),v.timeout)))),a=!1,e.loading?e.loadingComp:e.resolved}}function Gn(e){return e.isComment&&e.asyncFactory}function Yn(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(o(n)&&(o(n.componentOptions)||Gn(n)))return n}}function zn(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Qn(e,t)}function Wn(e,t){qn.$on(e,t)}function Jn(e,t){qn.$off(e,t)}function Xn(e,t){var n=qn;return function r(){var o=t.apply(null,arguments);null!==o&&n.$off(e,r)}}function Qn(e,t,n){qn=e,Bt(t,n||{},Wn,Jn,Xn,e),qn=void 0}function Zn(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;if(Array.isArray(e))for(var o=0,i=e.length;o<i;o++)r.$on(e[o],n);else(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0);return r},e.prototype.$once=function(e,t){var n=this;function r(){n.$off(e,r),t.apply(n,arguments)}return r.fn=t,n.$on(e,r),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var r=0,o=e.length;r<o;r++)n.$off(e[r],t);return n}var i,s=n._events[e];if(!s)return n;if(!t)return n._events[e]=null,n;var a=s.length;while(a--)if(i=s[a],i===t||i.fn===t){s.splice(a,1);break}return n},e.prototype.$emit=function(e){var t=this,n=e.toLowerCase();n!==e&&t._events[n]&&pe('Event "'+n+'" is emitted in component '+he(t)+' but the handler is registered for "'+e+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+T(e)+'" instead of "'+e+'".');var r=t._events[e];if(r){r=r.length>1?I(r):r;for(var o=I(arguments,1),i='event handler for "'+e+'"',s=0,a=r.length;s<a;s++)yt(r[s],t,o,t,i)}return t}}var er=null,tr=!1;function nr(e){var t=er;return er=e,function(){er=t}}function rr(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){while(n.$options.abstract&&n.$parent)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}function or(e){e.prototype._update=function(e,t){var n=this,r=n.$el,o=n._vnode,i=nr(n);n._vnode=e,n.$el=o?n.__patch__(o,e):n.__patch__(n.$el,e,t,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){var e=this;e._watcher&&e._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){ur(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||b(t.$children,e),e._watcher&&e._watcher.teardown();var n=e._watchers.length;while(n--)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),ur(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}function ir(e,t,r,o,i){tr=!0;var s=o.data.scopedSlots,a=e.$scopedSlots,c=!!(s&&!s.$stable||a!==n&&!a.$stable||s&&e.$scopedSlots.$key!==s.$key),u=!!(i||e.$options._renderChildren||c);if(e.$options._parentVnode=o,e.$vnode=o,e._vnode&&(e._vnode.parent=o),e.$options._renderChildren=i,e.$attrs=o.data.attrs||n,e.$listeners=r||n,t&&e.$options.props){Ce(!1);for(var f=e._props,l=e.$options._propKeys||[],p=0;p<l.length;p++){var d=l[p],h=e.$options.props;f[d]=rt(d,h,t,e)}Ce(!0),e.$options.propsData=t}e._$updateProperties&&e._$updateProperties(e),r=r||n;var v=e.$options._parentListeners;e.$options._parentListeners=r,Qn(e,r,v),u&&(e.$slots=tn(i,o.context),e.$forceUpdate()),tr=!1}function sr(e){while(e&&(e=e.$parent))if(e._inactive)return!0;return!1}function ar(e,t){if(t){if(e._directInactive=!1,sr(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)ar(e.$children[n]);ur(e,"activated")}}function cr(e,t){if((!t||(e._directInactive=!0,!sr(e)))&&!e._inactive){e._inactive=!0;for(var n=0;n<e.$children.length;n++)cr(e.$children[n]);ur(e,"deactivated")}}function ur(e,t){we();var n=e.$options[t],r=t+" hook";if(n)for(var o=0,i=n.length;o<i;o++)yt(n[o],e,null,e,r);e._hasHookEvent&&e.$emit("hook:"+t),xe()}var fr=100,lr=[],pr=[],dr={},hr={},vr=!1,yr=!1,mr=0;function gr(){mr=lr.length=pr.length=0,dr={},hr={},vr=yr=!1}var _r=Date.now;if(X&&!te){var br=window.performance;br&&"function"===typeof br.now&&_r()>document.createEvent("Event").timeStamp&&(_r=function(){return br.now()})}function wr(){var e,t;for(_r(),yr=!0,lr.sort((function(e,t){return e.id-t.id})),mr=0;mr<lr.length;mr++)if(e=lr[mr],e.before&&e.before(),t=e.id,dr[t]=null,e.run(),null!=dr[t]&&(hr[t]=(hr[t]||0)+1,hr[t]>fr)){le("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}var n=pr.slice(),r=lr.slice();gr(),Ar(n),xr(r),ae&&V.devtools&&ae.emit("flush")}function xr(e){var t=e.length;while(t--){var n=e[t],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&ur(r,"updated")}}function Or(e){e._inactive=!1,pr.push(e)}function Ar(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,ar(e[t],!0)}function Sr(e){var t=e.id;if(null==dr[t]){if(dr[t]=!0,yr){var n=lr.length-1;while(n>mr&&lr[n].id>e.id)n--;lr.splice(n+1,0,e)}else lr.push(e);if(!vr){if(vr=!0,!V.async)return void wr();Tt(wr)}}}var kr=0,Er=function(e,t,n,r,o){this.vm=e,o&&(e._watcher=this),e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++kr,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ue,this.newDepIds=new ue,this.expression=t.toString(),"function"===typeof t?this.getter=t:(this.getter=z(t),this.getter||(this.getter=N,le('Failed watching path: "'+t+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};Er.prototype.get=function(){var e;we(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(Mo){if(!this.user)throw Mo;vt(Mo,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Lt(e),xe(),this.cleanupDeps()}return e},Er.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Er.prototype.cleanupDeps=function(){var e=this.deps.length;while(e--){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Er.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():Sr(this)},Er.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||c(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(Mo){vt(Mo,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},Er.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Er.prototype.depend=function(){var e=this.deps.length;while(e--)this.deps[e].depend()},Er.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||b(this.vm._watchers,this);var e=this.deps.length;while(e--)this.deps[e].removeSub(this);this.active=!1}};var Tr={enumerable:!0,configurable:!0,get:N,set:N};function $r(e,t,n){Tr.get=function(){return this[t][n]},Tr.set=function(e){this[t][n]=e},Object.defineProperty(e,n,Tr)}function Pr(e){e._watchers=[];var t=e.$options;t.props&&jr(e,t.props),t.methods&&Lr(e,t.methods),t.data?Ir(e):Re(e._data={},!0),t.computed&&Nr(e,t.computed),t.watch&&t.watch!==oe&&qr(e,t.watch)}function jr(e,t){var n=e.$options.propsData||{},r=e._props={},o=e.$options._propKeys=[],i=!e.$parent;i||Ce(!1);var s=function(s){o.push(s);var a=rt(s,t,n,e),c=T(s);(_(c)||V.isReservedAttr(c))&&le('"'+c+'" is a reserved attribute and cannot be used as component prop.',e),Ue(r,s,a,(function(){if(!i&&!tr){if("mp-baidu"===e.mpHost)return;if("value"===s&&Array.isArray(e.$options.behaviors)&&-1!==e.$options.behaviors.indexOf("uni://form-field"))return;if(e._getFormData)return;var t=e.$parent;while(t){if(t.__next_tick_pending)return;t=t.$parent}le("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+s+'"',e)}})),s in e||$r(e,"_props",s)};for(var a in t)s(a);Ce(!0)}function Ir(e){var t=e.$options.data;t=e._data="function"===typeof t?Cr(t,e):t||{},l(t)||(t={},le("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));var n=Object.keys(t),r=e.$options.props,o=e.$options.methods,i=n.length;while(i--){var s=n[i];o&&x(o,s)&&le('Method "'+s+'" has already been defined as a data property.',e),r&&x(r,s)?le('The data property "'+s+'" is already declared as a prop. Use prop default value instead.',e):H(s)||$r(e,"_data",s)}Re(t,!0)}function Cr(e,t){we();try{return e.call(t,t)}catch(Mo){return vt(Mo,t,"data()"),{}}finally{xe()}}var Dr={lazy:!0};function Nr(e,t){var n=e._computedWatchers=Object.create(null),r=se();for(var o in t){var i=t[o],s="function"===typeof i?i:i.get;null==s&&le('Getter is missing for computed property "'+o+'".',e),r||(n[o]=new Er(e,s||N,N,Dr)),o in e?o in e.$data?le('The computed property "'+o+'" is already defined in data.',e):e.$options.props&&o in e.$options.props&&le('The computed property "'+o+'" is already defined as a prop.',e):Mr(e,o,i)}}function Mr(e,t,n){var r=!se();"function"===typeof n?(Tr.get=r?Rr(t):Ur(n),Tr.set=N):(Tr.get=n.get?r&&!1!==n.cache?Rr(t):Ur(n.get):N,Tr.set=n.set||N),Tr.set===N&&(Tr.set=function(){le('Computed property "'+t+'" was assigned to but it has no setter.',this)}),Object.defineProperty(e,t,Tr)}function Rr(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),be.SharedObject.target&&t.depend(),t.value}}function Ur(e){return function(){return e.call(this,this)}}function Lr(e,t){var n=e.$options.props;for(var r in t)"function"!==typeof t[r]&&le('Method "'+r+'" has type "'+typeof t[r]+'" in the component definition. Did you reference the function correctly?',e),n&&x(n,r)&&le('Method "'+r+'" has already been defined as a prop.',e),r in e&&H(r)&&le('Method "'+r+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),e[r]="function"!==typeof t[r]?N:j(t[r],e)}function qr(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)Fr(e,n,r[o]);else Fr(e,n,r)}}function Fr(e,t,n,r){return l(n)&&(r=n,n=n.handler),"string"===typeof n&&(n=e[n]),e.$watch(t,n,r)}function Kr(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};t.set=function(){le("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){le("$props is readonly.",this)},Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=Le,e.prototype.$delete=qe,e.prototype.$watch=function(e,t,n){var r=this;if(l(t))return Fr(r,e,t,n);n=n||{},n.user=!0;var o=new Er(r,e,t,n);if(n.immediate)try{t.call(r,o.value)}catch(i){vt(i,r,'callback for immediate watcher "'+o.expression+'"')}return function(){o.teardown()}}}var Vr=0;function Br(e){e.prototype._init=function(e){var t,n,r=this;r._uid=Vr++,V.performance&&Mt&&(t="vue-perf-start:"+r._uid,n="vue-perf-end:"+r._uid,Mt(t)),r._isVue=!0,e&&e._isComponent?Hr(r,e):r.$options=tt(Gr(r.constructor),e||{},r),bt(r),r._self=r,rr(r),zn(r),Ln(r),ur(r,"beforeCreate"),!r._$fallback&&Zt(r),Pr(r),!r._$fallback&&Qt(r),!r._$fallback&&ur(r,"created"),V.performance&&Mt&&(r._name=he(r,!1),Mt(n),Rt("vue "+r._name+" init",t,n)),r.$options.el&&r.$mount(r.$options.el)}}function Hr(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}function Gr(e){var t=e.options;if(e.super){var n=Gr(e.super),r=e.superOptions;if(n!==r){e.superOptions=n;var o=Yr(e);o&&C(e.extendOptions,o),t=e.options=tt(n,e.extendOptions),t.name&&(t.components[t.name]=e)}}return t}function Yr(e){var t,n=e.options,r=e.sealedOptions;for(var o in n)n[o]!==r[o]&&(t||(t={}),t[o]=n[o]);return t}function zr(e){this instanceof zr||le("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function Wr(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=I(arguments,1);return n.unshift(this),"function"===typeof e.install?e.install.apply(e,n):"function"===typeof e&&e.apply(null,n),t.push(e),this}}function Jr(e){e.mixin=function(e){return this.options=tt(this.options,e),this}}function Xr(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,o=e._Ctor||(e._Ctor={});if(o[r])return o[r];var i=e.name||n.options.name;i&&Je(i);var s=function(e){this._init(e)};return s.prototype=Object.create(n.prototype),s.prototype.constructor=s,s.cid=t++,s.options=tt(n.options,e),s["super"]=n,s.options.props&&Qr(s),s.options.computed&&Zr(s),s.extend=n.extend,s.mixin=n.mixin,s.use=n.use,F.forEach((function(e){s[e]=n[e]})),i&&(s.options.components[i]=s),s.superOptions=n.options,s.extendOptions=e,s.sealedOptions=C({},s.options),o[r]=s,s}}function Qr(e){var t=e.options.props;for(var n in t)$r(e.prototype,"_props",n)}function Zr(e){var t=e.options.computed;for(var n in t)Mr(e.prototype,n,t[n])}function eo(e){F.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&Je(e),"component"===t&&l(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"===typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}function to(e){return e&&(e.Ctor.options.name||e.tag)}function no(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"===typeof e?e.split(",").indexOf(t)>-1:!!p(e)&&e.test(t)}function ro(e,t){var n=e.cache,r=e.keys,o=e._vnode;for(var i in n){var s=n[i];if(s){var a=to(s.componentOptions);a&&!t(a)&&oo(n,i,r,o)}}}function oo(e,t,n,r){var o=e[t];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),e[t]=null,b(n,t)}Br(zr),Kr(zr),Zn(zr),or(zr),Kn(zr);var io=[String,RegExp,Array],so={name:"keep-alive",abstract:!0,props:{include:io,exclude:io,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)oo(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",(function(t){ro(e,(function(e){return no(t,e)}))})),this.$watch("exclude",(function(t){ro(e,(function(e){return!no(t,e)}))}))},render:function(){var e=this.$slots.default,t=Yn(e),n=t&&t.componentOptions;if(n){var r=to(n),o=this,i=o.include,s=o.exclude;if(i&&(!r||!no(i,r))||s&&r&&no(s,r))return t;var a=this,c=a.cache,u=a.keys,f=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;c[f]?(t.componentInstance=c[f].componentInstance,b(u,f),u.push(f)):(c[f]=t,u.push(f),this.max&&u.length>parseInt(this.max)&&oo(c,u[0],u,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}},ao={KeepAlive:so};function co(e){var t={get:function(){return V},set:function(){le("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(e,"config",t),e.util={warn:le,extend:C,mergeOptions:tt,defineReactive:Ue},e.set=Le,e.delete=qe,e.nextTick=Tt,e.observable=function(e){return Re(e),e},e.options=Object.create(null),F.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,C(e.options.components,ao),Wr(e),Jr(e),Xr(e),eo(e)}co(zr),Object.defineProperty(zr.prototype,"$isServer",{get:se}),Object.defineProperty(zr.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(zr,"FunctionalRenderContext",{value:xn}),zr.version="2.6.11";var uo="[object Array]",fo="[object Object]";function lo(e,t){var n={};return po(e,t),ho(e,t,"",n),n}function po(e,t){if(e!==t){var n=yo(e),r=yo(t);if(n==fo&&r==fo){if(Object.keys(e).length>=Object.keys(t).length)for(var o in t){var i=e[o];void 0===i?e[o]=null:po(i,t[o])}}else n==uo&&r==uo&&e.length>=t.length&&t.forEach((function(t,n){po(e[n],t)}))}}function ho(e,t,n,r){if(e!==t){var o=yo(e),i=yo(t);if(o==fo)if(i!=fo||Object.keys(e).length<Object.keys(t).length)vo(r,n,e);else{var s=function(o){var i=e[o],s=t[o],a=yo(i),c=yo(s);if(a!=uo&&a!=fo)i!=t[o]&&vo(r,(""==n?"":n+".")+o,i);else if(a==uo)c!=uo?vo(r,(""==n?"":n+".")+o,i):i.length<s.length?vo(r,(""==n?"":n+".")+o,i):i.forEach((function(e,t){ho(e,s[t],(""==n?"":n+".")+o+"["+t+"]",r)}));else if(a==fo)if(c!=fo||Object.keys(i).length<Object.keys(s).length)vo(r,(""==n?"":n+".")+o,i);else for(var u in i)ho(i[u],s[u],(""==n?"":n+".")+o+"."+u,r)};for(var a in e)s(a)}else o==uo?i!=uo?vo(r,n,e):e.length<t.length?vo(r,n,e):e.forEach((function(e,o){ho(e,t[o],n+"["+o+"]",r)})):vo(r,n,e)}}function vo(e,t,n){e[t]=n}function yo(e){return Object.prototype.toString.call(e)}function mo(e){if(e.__next_tick_callbacks&&e.__next_tick_callbacks.length){if(Object({NODE_ENV:"development",VUE_APP_PLATFORM:"mp-qq",BASE_URL:"/"}).VUE_APP_DEBUG){var t=e.$scope;console.log("["+ +new Date+"]["+(t.is||t.route)+"]["+e._uid+"]:flushCallbacks["+e.__next_tick_callbacks.length+"]")}var n=e.__next_tick_callbacks.slice(0);e.__next_tick_callbacks.length=0;for(var r=0;r<n.length;r++)n[r]()}}function go(e){return lr.find((function(t){return e._watcher===t}))}function _o(e,t){if(!e.__next_tick_pending&&!go(e)){if(Object({NODE_ENV:"development",VUE_APP_PLATFORM:"mp-qq",BASE_URL:"/"}).VUE_APP_DEBUG){var n=e.$scope;console.log("["+ +new Date+"]["+(n.is||n.route)+"]["+e._uid+"]:nextVueTick")}return Tt(t,e)}if(Object({NODE_ENV:"development",VUE_APP_PLATFORM:"mp-qq",BASE_URL:"/"}).VUE_APP_DEBUG){var r=e.$scope;console.log("["+ +new Date+"]["+(r.is||r.route)+"]["+e._uid+"]:nextMPTick")}var o;if(e.__next_tick_callbacks||(e.__next_tick_callbacks=[]),e.__next_tick_callbacks.push((function(){if(t)try{t.call(e)}catch(Mo){vt(Mo,e,"nextTick")}else o&&o(e)})),!t&&"undefined"!==typeof Promise)return new Promise((function(e){o=e}))}function bo(e){var t=Object.create(null),n=[].concat(Object.keys(e._data||{}),Object.keys(e._computedWatchers||{}));return n.reduce((function(t,n){return t[n]=e[n],t}),t),Object.assign(t,e.$mp.data||{}),Array.isArray(e.$options.behaviors)&&-1!==e.$options.behaviors.indexOf("uni://form-field")&&(t["name"]=e.name,t["value"]=e.value),JSON.parse(JSON.stringify(t))}var wo=function(e,t){var n=this;if(null!==t&&("page"===this.mpType||"component"===this.mpType)){var r=this.$scope,o=Object.create(null);try{o=bo(this)}catch(a){console.error(a)}o.__webviewId__=r.data.__webviewId__;var i=Object.create(null);Object.keys(o).forEach((function(e){i[e]=r.data[e]}));var s=!1===this.$shouldDiffData?o:lo(o,i);Object.keys(s).length?(Object({NODE_ENV:"development",VUE_APP_PLATFORM:"mp-qq",BASE_URL:"/"}).VUE_APP_DEBUG&&console.log("["+ +new Date+"]["+(r.is||r.route)+"]["+this._uid+"]差量更新",JSON.stringify(s)),this.__next_tick_pending=!0,r.setData(s,(function(){n.__next_tick_pending=!1,mo(n)}))):mo(this)}};function xo(){}function Oo(e,t,n){if(!e.mpType)return e;"app"===e.mpType&&(e.$options.render=xo),e.$options.render||(e.$options.render=xo,e.$options.template&&"#"!==e.$options.template.charAt(0)||e.$options.el||t?le("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",e):le("Failed to mount component: template or render function not defined.",e)),!e._$fallback&&ur(e,"beforeMount");var r=function(){e._update(e._render(),n)};return new Er(e,r,N,{before:function(){e._isMounted&&!e._isDestroyed&&ur(e,"beforeUpdate")}},!0),n=!1,e}function Ao(e,t){return o(e)||o(t)?So(e,ko(t)):""}function So(e,t){return e?t?e+" "+t:e:t||""}function ko(e){return Array.isArray(e)?Eo(e):c(e)?To(e):"string"===typeof e?e:""}function Eo(e){for(var t,n="",r=0,i=e.length;r<i;r++)o(t=ko(e[r]))&&""!==t&&(n&&(n+=" "),n+=t);return n}function To(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}var $o=O((function(e){var t={},n=/;(?![^(]*\))/g,r=/:(.+)/;return e.split(n).forEach((function(e){if(e){var n=e.split(r);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}));function Po(e){return Array.isArray(e)?D(e):"string"===typeof e?$o(e):e}var jo=["createSelectorQuery","createIntersectionObserver","selectAllComponents","selectComponent"];function Io(e,t){var n=t.split("."),r=n[0];return 0===r.indexOf("__$n")&&(r=parseInt(r.replace("__$n",""))),1===n.length?e[r]:Io(e[r],n.slice(1).join("."))}function Co(e){e.config.errorHandler=function(t,n,r){e.util.warn("Error in "+r+': "'+t.toString()+'"',n),console.error(t);var o=getApp();o&&o.onError&&o.onError(t)};var t=e.prototype.$emit;e.prototype.$emit=function(e){return this.$scope&&e&&this.$scope["triggerEvent"](e,{__args__:I(arguments,1)}),t.apply(this,arguments)},e.prototype.$nextTick=function(e){return _o(this,e)},jo.forEach((function(t){e.prototype[t]=function(e){return this.$scope&&this.$scope[t]?this.$scope[t](e):"undefined"!==typeof my?"createSelectorQuery"===t?my.createSelectorQuery(e):"createIntersectionObserver"===t?my.createIntersectionObserver(e):void 0:void 0}})),e.prototype.__init_provide=Qt,e.prototype.__init_injections=Zt,e.prototype.__call_hook=function(e,t){var n=this;we();var r,o=n.$options[e],i=e+" hook";if(o)for(var s=0,a=o.length;s<a;s++)r=yt(o[s],n,t?[t]:null,n,i);return n._hasHookEvent&&n.$emit("hook:"+e,t),xe(),r},e.prototype.__set_model=function(e,t,n,r){Array.isArray(r)&&(-1!==r.indexOf("trim")&&(n=n.trim()),-1!==r.indexOf("number")&&(n=this._n(n))),e||(e=this),e[t]=n},e.prototype.__set_sync=function(e,t,n){e||(e=this),e[t]=n},e.prototype.__get_orig=function(e){return l(e)&&e["$orig"]||e},e.prototype.__get_value=function(e,t){return Io(t||this,e)},e.prototype.__get_class=function(e,t){return Ao(t,e)},e.prototype.__get_style=function(e,t){if(!e&&!t)return"";var n=Po(e),r=t?C(t,n):n;return Object.keys(r).map((function(e){return T(e)+":"+r[e]})).join(";")},e.prototype.__map=function(e,t){var n,r,o,i,s;if(Array.isArray(e)){for(n=new Array(e.length),r=0,o=e.length;r<o;r++)n[r]=t(e[r],r);return n}if(c(e)){for(i=Object.keys(e),n=Object.create(null),r=0,o=i.length;r<o;r++)s=i[r],n[s]=t(e[s],s,r);return n}return[]}}var Do=["onLaunch","onShow","onHide","onUniNViewMessage","onError","onLoad","onReady","onUnload","onPullDownRefresh","onReachBottom","onTabItemTap","onShareAppMessage","onResize","onPageScroll","onNavigationBarButtonTap","onBackPress","onNavigationBarSearchInputChanged","onNavigationBarSearchInputConfirmed","onNavigationBarSearchInputClicked","onPageShow","onPageHide","onPageResize"];function No(e){var t=e.extend;e.extend=function(e){e=e||{};var n=e.methods;return n&&Object.keys(n).forEach((function(t){-1!==Do.indexOf(t)&&(e[t]=n[t],delete n[t])})),t.call(this,e)};var n=e.config.optionMergeStrategies,r=n.created;Do.forEach((function(e){n[e]=r})),e.prototype.__lifecycle_hooks__=Do}zr.prototype.__patch__=wo,zr.prototype.$mount=function(e,t){return Oo(this,e,t)},No(zr),Co(zr),t["default"]=zr}.call(this,n(/*! ./../../../../../webpack/buildin/global.js */3))},3:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(r){"object"===typeof window&&(n=window)}e.exports=n},32:
/*!************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/uni-cloud/dist/index.js ***!
  \************************************************************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e,r){function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e){return function(){var t,n=y(e);if(d()){var r=y(this).constructor;t=Reflect.construct(n,arguments,r)}else t=n.apply(this,arguments);return c(this,t)}}function c(e,t){return!t||"object"!==typeof t&&"function"!==typeof t?u(e):t}function u(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}function l(e){var t="function"===typeof Map?new Map:void 0;return l=function(e){if(null===e||!h(e))return e;if("function"!==typeof e)throw new TypeError("Super expression must either be null or a function");if("undefined"!==typeof t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return p(e,arguments,y(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),v(n,e)},l(e)}function p(e,t,n){return p=d()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=Function.bind.apply(e,r),i=new o;return n&&v(i,n.prototype),i},p.apply(null,arguments)}function d(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(m){return!1}}function h(e){return-1!==Function.toString.call(e).indexOf("[native code]")}function v(e,t){return v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},v(e,t)}function y(e){return y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},y(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var m="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof e?e:"undefined"!=typeof self?self:{};function g(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function _(e,t){return e(t={exports:{}},t.exports),t.exports}var b=_((function(e,t){var n;e.exports=(n=n||function(e,t){var n=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),r={},o=r.lib={},i=o.Base={extend:function(e){var t=n(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},s=o.WordArray=i.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||c).stringify(this)},concat:function(e){var t=this.words,n=e.words,r=this.sigBytes,o=e.sigBytes;if(this.clamp(),r%4)for(var i=0;i<o;i++){var s=n[i>>>2]>>>24-i%4*8&255;t[r+i>>>2]|=s<<24-(r+i)%4*8}else for(i=0;i<o;i+=4)t[r+i>>>2]=n[i>>>2];return this.sigBytes+=o,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=i.clone.call(this);return e.words=this.words.slice(0),e},random:function(t){for(var n,r=[],o=function(t){t=t;var n=987654321,r=4294967295;return function(){var o=((n=36969*(65535&n)+(n>>16)&r)<<16)+(t=18e3*(65535&t)+(t>>16)&r)&r;return o/=4294967296,(o+=.5)*(e.random()>.5?1:-1)}},i=0;i<t;i+=4){var a=o(4294967296*(n||e.random()));n=987654071*a(),r.push(4294967296*a()|0)}return new s.init(r,t)}}),a=r.enc={},c=a.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push((i>>>4).toString(16)),r.push((15&i).toString(16))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r+=2)n[r>>>3]|=parseInt(e.substr(r,2),16)<<24-r%8*4;return new s.init(n,t/2)}},u=a.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push(String.fromCharCode(i))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r>>>2]|=(255&e.charCodeAt(r))<<24-r%4*8;return new s.init(n,t)}},f=a.Utf8={stringify:function(e){try{return decodeURIComponent(escape(u.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return u.parse(unescape(encodeURIComponent(e)))}},l=o.BufferedBlockAlgorithm=i.extend({reset:function(){this._data=new s.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=f.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n=this._data,r=n.words,o=n.sigBytes,i=this.blockSize,a=o/(4*i),c=(a=t?e.ceil(a):e.max((0|a)-this._minBufferSize,0))*i,u=e.min(4*c,o);if(c){for(var f=0;f<c;f+=i)this._doProcessBlock(r,f);var l=r.splice(0,c);n.sigBytes-=u}return new s.init(l,u)},clone:function(){var e=i.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),p=(o.Hasher=l.extend({cfg:i.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){l.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new p.HMAC.init(e,n).finalize(t)}}}),r.algo={});return r}(Math),n)})),w=(_((function(e,t){var n;e.exports=(n=b,function(e){var t=n,r=t.lib,o=r.WordArray,i=r.Hasher,s=t.algo,a=[];!function(){for(var t=0;t<64;t++)a[t]=4294967296*e.abs(e.sin(t+1))|0}();var c=s.MD5=i.extend({_doReset:function(){this._hash=new o.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(e,t){for(var n=0;n<16;n++){var r=t+n,o=e[r];e[r]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8)}var i=this._hash.words,s=e[t+0],c=e[t+1],d=e[t+2],h=e[t+3],v=e[t+4],y=e[t+5],m=e[t+6],g=e[t+7],_=e[t+8],b=e[t+9],w=e[t+10],x=e[t+11],O=e[t+12],A=e[t+13],S=e[t+14],k=e[t+15],E=i[0],T=i[1],$=i[2],P=i[3];E=u(E,T,$,P,s,7,a[0]),P=u(P,E,T,$,c,12,a[1]),$=u($,P,E,T,d,17,a[2]),T=u(T,$,P,E,h,22,a[3]),E=u(E,T,$,P,v,7,a[4]),P=u(P,E,T,$,y,12,a[5]),$=u($,P,E,T,m,17,a[6]),T=u(T,$,P,E,g,22,a[7]),E=u(E,T,$,P,_,7,a[8]),P=u(P,E,T,$,b,12,a[9]),$=u($,P,E,T,w,17,a[10]),T=u(T,$,P,E,x,22,a[11]),E=u(E,T,$,P,O,7,a[12]),P=u(P,E,T,$,A,12,a[13]),$=u($,P,E,T,S,17,a[14]),E=f(E,T=u(T,$,P,E,k,22,a[15]),$,P,c,5,a[16]),P=f(P,E,T,$,m,9,a[17]),$=f($,P,E,T,x,14,a[18]),T=f(T,$,P,E,s,20,a[19]),E=f(E,T,$,P,y,5,a[20]),P=f(P,E,T,$,w,9,a[21]),$=f($,P,E,T,k,14,a[22]),T=f(T,$,P,E,v,20,a[23]),E=f(E,T,$,P,b,5,a[24]),P=f(P,E,T,$,S,9,a[25]),$=f($,P,E,T,h,14,a[26]),T=f(T,$,P,E,_,20,a[27]),E=f(E,T,$,P,A,5,a[28]),P=f(P,E,T,$,d,9,a[29]),$=f($,P,E,T,g,14,a[30]),E=l(E,T=f(T,$,P,E,O,20,a[31]),$,P,y,4,a[32]),P=l(P,E,T,$,_,11,a[33]),$=l($,P,E,T,x,16,a[34]),T=l(T,$,P,E,S,23,a[35]),E=l(E,T,$,P,c,4,a[36]),P=l(P,E,T,$,v,11,a[37]),$=l($,P,E,T,g,16,a[38]),T=l(T,$,P,E,w,23,a[39]),E=l(E,T,$,P,A,4,a[40]),P=l(P,E,T,$,s,11,a[41]),$=l($,P,E,T,h,16,a[42]),T=l(T,$,P,E,m,23,a[43]),E=l(E,T,$,P,b,4,a[44]),P=l(P,E,T,$,O,11,a[45]),$=l($,P,E,T,k,16,a[46]),E=p(E,T=l(T,$,P,E,d,23,a[47]),$,P,s,6,a[48]),P=p(P,E,T,$,g,10,a[49]),$=p($,P,E,T,S,15,a[50]),T=p(T,$,P,E,y,21,a[51]),E=p(E,T,$,P,O,6,a[52]),P=p(P,E,T,$,h,10,a[53]),$=p($,P,E,T,w,15,a[54]),T=p(T,$,P,E,c,21,a[55]),E=p(E,T,$,P,_,6,a[56]),P=p(P,E,T,$,k,10,a[57]),$=p($,P,E,T,m,15,a[58]),T=p(T,$,P,E,A,21,a[59]),E=p(E,T,$,P,v,6,a[60]),P=p(P,E,T,$,x,10,a[61]),$=p($,P,E,T,d,15,a[62]),T=p(T,$,P,E,b,21,a[63]),i[0]=i[0]+E|0,i[1]=i[1]+T|0,i[2]=i[2]+$|0,i[3]=i[3]+P|0},_doFinalize:function(){var t=this._data,n=t.words,r=8*this._nDataBytes,o=8*t.sigBytes;n[o>>>5]|=128<<24-o%32;var i=e.floor(r/4294967296),s=r;n[15+(o+64>>>9<<4)]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),n[14+(o+64>>>9<<4)]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),t.sigBytes=4*(n.length+1),this._process();for(var a=this._hash,c=a.words,u=0;u<4;u++){var f=c[u];c[u]=16711935&(f<<8|f>>>24)|4278255360&(f<<24|f>>>8)}return a},clone:function(){var e=i.clone.call(this);return e._hash=this._hash.clone(),e}});function u(e,t,n,r,o,i,s){var a=e+(t&n|~t&r)+o+s;return(a<<i|a>>>32-i)+t}function f(e,t,n,r,o,i,s){var a=e+(t&r|n&~r)+o+s;return(a<<i|a>>>32-i)+t}function l(e,t,n,r,o,i,s){var a=e+(t^n^r)+o+s;return(a<<i|a>>>32-i)+t}function p(e,t,n,r,o,i,s){var a=e+(n^(t|~r))+o+s;return(a<<i|a>>>32-i)+t}t.MD5=i._createHelper(c),t.HmacMD5=i._createHmacHelper(c)}(Math),n.MD5)})),_((function(e,t){var n,r,o;e.exports=(r=(n=b).lib.Base,o=n.enc.Utf8,void(n.algo.HMAC=r.extend({init:function(e,t){e=this._hasher=new e.init,"string"==typeof t&&(t=o.parse(t));var n=e.blockSize,r=4*n;t.sigBytes>r&&(t=e.finalize(t)),t.clamp();for(var i=this._oKey=t.clone(),s=this._iKey=t.clone(),a=i.words,c=s.words,u=0;u<n;u++)a[u]^=1549556828,c[u]^=909522486;i.sigBytes=s.sigBytes=r,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher,n=t.finalize(e);return t.reset(),t.finalize(this._oKey.clone().concat(n))}})))})),_((function(e,t){e.exports=b.HmacMD5})));function x(e){return function(t){if(!((t=t||{}).success||t.fail||t.complete))return e.call(this,t);e.call(this,t).then((function(e){t.success&&t.success(e),t.complete&&t.complete(e)})).catch((function(e){t.fail&&t.fail(e),t.complete&&t.complete(e)}))}}var O,A=function(e){f(n,e);var t=a(n);function n(e){var r;return s(this,n),r=t.call(this,e.message),r.errMsg=e.message||"",Object.defineProperties(u(r),{code:{get:function(){return e.code}},requestId:{get:function(){return e.requestId}},message:{get:function(){return this.errMsg},set:function(e){this.errMsg=e}}}),r}return n}(l(Error)),S="undefined"!=typeof r&&void 0!==r.request,k="1.0.0";try{O=n(/*! uni-stat-config */33).default||n(/*! uni-stat-config */33)}catch(m){O={appid:""}}var E,T,$="__DC_CLOUD_UUID";function P(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8,t="";t.length<e;)t+=Math.random().toString(32).substring(2);return t.substring(0,e)}function j(){if("n"===I()){try{E=plus.runtime.getDCloudId()}catch(m){E=""}return E}return E||(E=P(32),r.setStorage({key:$,data:E})),E}function I(){return{"app-plus":"n",h5:"h5","mp-weixin":"wx","mp-alipay":"ali","mp-baidu":"bd","mp-toutiao":"tt","mp-qq":"qq","quickapp-native":"qn"}["mp-qq"]}var C={sign:function(e,t){var n="";return Object.keys(e).sort().forEach((function(t){e[t]&&(n=n+"&"+t+"="+e[t])})),n=n.slice(1),w(n,t).toString()},wrappedRequest:function(e,t){return new Promise((function(n,r){t(Object.assign(e,{complete:function(e){e||(e={}),e.errMsg.indexOf("request:fail");var t=e.data&&e.data.header&&e.data.header["x-serverless-request-id"]||e.header&&e.header["request-id"];if(!e.statusCode||e.statusCode>=400)return r(new A({code:"SYS_ERR",message:e.errMsg||"request:fail",requestId:t}));var o=e.data;if(o.error)return r(new A({code:o.error.code,message:o.error.message,requestId:t}));o.result=o.data,o.requestId=t,delete o.data,n(o)}}))}))}},D={image:"image/*",jpg:"image/jpeg",jpeg:"image/jpeg",png:"image/png",gif:"image/gif",webp:"image/webp",svg:"image/svg+xml",mp3:"audio/mp3",mp4:"video/mp4",ogg:"audio/ogg",webm:"video/webm"};function N(e){return D[e.toLowerCase()]}var M,R=function(){function e(t){s(this,e),["spaceId","clientSecret"].forEach((function(e){if(!Object.prototype.hasOwnProperty.call(t,e))throw new Error("缺少参数".concat(e))})),this.config=Object.assign({},{endpoint:"https://api.bspapp.com"},t),this.config.provider="aliyun",this.config.requestUrl=this.config.endpoint+"/client",this.config.envType=this.config.envType||"public",this.config.accessTokenKey="access_token_"+this.config.spaceId}return i(e,[{key:"setAccessToken",value:function(e){this.accessToken=e}},{key:"requestWrapped",value:function(e){return C.wrappedRequest(e,this.adapter.request)}},{key:"requestAuth",value:function(e){return this.requestWrapped(e)}},{key:"request",value:function(e,t){var n=this;return this.hasAccessToken?t?this.requestWrapped(e):this.requestWrapped(e).catch((function(t){return new Promise((function(e,n){!t||"GATEWAY_INVALID_TOKEN"!==t.code&&"InvalidParameter.InvalidToken"!==t.code?n(t):e()})).then((function(){return n.getAccessToken()})).then((function(){var t=n.rebuildRequest(e);return n.request(t,!0)}))})):this.getAccessToken().then((function(){var t=n.rebuildRequest(e);return n.request(t,!0)}))}},{key:"rebuildRequest",value:function(e){var t=Object.assign({},e);return t.data.token=this.accessToken,t.header["x-basement-token"]=this.accessToken,t.header["x-serverless-sign"]=C.sign(t.data,this.config.clientSecret),t}},{key:"setupRequest",value:function(e,t){var n=Object.assign({},e,{spaceId:this.config.spaceId,timestamp:Date.now()}),r={"Content-Type":"application/json"};return"auth"!==t&&(n.token=this.accessToken,r["x-basement-token"]=this.accessToken),r["x-serverless-sign"]=C.sign(n,this.config.clientSecret),{url:this.config.requestUrl,method:"POST",data:n,dataType:"json",header:r}}},{key:"getAccessToken",value:function(){var e=this;return this.requestAuth(this.setupRequest({method:"serverless.auth.user.anonymousAuthorize",params:"{}"},"auth")).then((function(t){return new Promise((function(n,r){t.result&&t.result.accessToken?(e.setAccessToken(t.result.accessToken),n(e.accessToken)):r(new A({code:"AUTH_FAILED",message:"获取accessToken失败"}))}))}))}},{key:"authorize",value:function(){this.getAccessToken()}},{key:"callFunction",value:function(e){var t={method:"serverless.function.runtime.invoke",params:JSON.stringify({functionTarget:e.name,functionArgs:e.data||{}})};return this.request(this.setupRequest(t))}},{key:"getOSSUploadOptionsFromPath",value:function(e){var t={method:"serverless.file.resource.generateProximalSign",params:JSON.stringify(e)};return this.request(this.setupRequest(t))}},{key:"uploadFileToOSS",value:function(e){var t=this,n=e.url,r=e.formData,o=e.name,i=e.filePath,s=e.fileType,a=e.onUploadProgress;return new Promise((function(e,c){var u=t.adapter.uploadFile({url:n,formData:r,name:o,filePath:i,fileType:s,header:{"X-OSS-server-side-encrpytion":"AES256"},success:function(t){t&&t.statusCode<400?e(t):c(new A({code:"UPLOAD_FAILED",message:"文件上传失败"}))},fail:function(e){c(e)}});"function"==typeof a&&u&&"function"==typeof u.onProgressUpdate&&u.onProgressUpdate((function(e){a({loaded:e.totalBytesSent,total:e.totalBytesExpectedToSend})}))}))}},{key:"reportOSSUpload",value:function(e){var t={method:"serverless.file.resource.report",params:JSON.stringify(e)};return this.request(this.setupRequest(t))}},{key:"uploadFile",value:function(e){var t=this,n=e.filePath,r=e.cloudPath,o=e.fileType,i=void 0===o?"image":o,s=e.onUploadProgress,a=e.config;if(!r)throw new A({code:"CLOUDPATH_REQUIRED",message:"cloudPath不可为空"});var c,u,f,l=a&&a.envType||this.config.envType,p=r.split("?")[0].split(".").pop();if(!N(p))throw new A({code:"UNSUPPORTED_FILE_TYPE",message:"不支持的文件类型"});return this.getOSSUploadOptionsFromPath({env:l,filename:r}).then((function(e){var r=e.result;c=N(p),u=r.id,f="https://"+r.cdnDomain+"/"+r.ossPath;var o={url:"https://"+r.host,formData:{"Cache-Control":"max-age=2592000","Content-Disposition":"attachment",OSSAccessKeyId:r.accessKeyId,Signature:r.signature,host:r.host,id:u,key:r.ossPath,policy:r.policy,success_action_status:200},fileName:"file",name:"file",filePath:n,fileType:i,contentType:c};return t.uploadFileToOSS(Object.assign({},o,{onUploadProgress:s}))})).then((function(){return t.reportOSSUpload({id:u,contentType:c})})).then((function(e){return new Promise((function(t,r){e.success?t({success:!0,filePath:n,fileID:f}):r(new A({code:"UPLOAD_FAILED",message:"文件上传失败"}))}))}))}},{key:"deleteFile",value:function(e){var t=e.fileList,n={method:"serverless.file.resource.delete",params:JSON.stringify({id:t[0]})};return this.request(this.setupRequest(n))}},{key:"hasAccessToken",get:function(){return!!this.accessToken}}]),e}(),U={init:function(e){var t=new R(e);["uploadFile","deleteFile"].forEach((function(e){t[e]=x(t[e]).bind(t)}));var n={signInAnonymously:function(){return t.authorize()},getLoginState:function(){return Promise.resolve(!1)}};return t.auth=function(){return n},t}};function L(e,t,n){void 0===n&&(n={});var r=/\?/.test(t),o="";for(var i in n)""===o?!r&&(t+="?"):o+="&",o+=i+"="+encodeURIComponent(n[i]);return/^http(s)?\:\/\//.test(t+=o)?t:""+e+t}!function(e){e.local="local",e.none="none",e.session="session"}(M||(M={}));var q,F=(q=function(e,t){return(q=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}q(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),K=function(){return(K=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},V=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return F(t,e),t.prototype.post=function(e){var t=e.url,n=e.data,o=e.headers;return new Promise((function(e,i){r.request({url:L("https:",t),data:n,method:"POST",header:o,success:function(t){e(t)},fail:function(e){i(e)}})}))},t.prototype.upload=function(e){return new Promise((function(t,n){var o=e.url,i=e.file,s=e.data,a=e.headers,c=e.fileType,u=r.uploadFile({url:L("https:",o),name:"file",formData:Object.assign({},s),filePath:i,fileType:c,header:a,success:function(e){var n={statusCode:e.statusCode,data:e.data||{}};200===e.statusCode&&s.success_action_status&&(n.statusCode=parseInt(s.success_action_status,10)),t(n)},fail:function(e){n(new Error(e.errMsg||"uploadFile:fail"))}});"function"==typeof e.onUploadProgress&&u&&"function"==typeof u.onProgressUpdate&&u.onProgressUpdate((function(t){e.onUploadProgress({loaded:t.totalBytesSent,total:t.totalBytesExpectedToSend})}))}))},t.prototype.download=function(e){var t=e.url,n=e.headers;return new Promise((function(e,o){r.downloadFile({url:L("https:",t),header:n,success:function(t){200===t.statusCode&&t.tempFilePath?e({statusCode:200,tempFilePath:t.tempFilePath}):e(t)},fail:function(e){o(e)}})}))},t}((function(){})),B={setItem:function(e,t){r.setStorageSync(e,t)},getItem:function(e){return r.getStorageSync(e)},removeItem:function(e){r.removeStorageSync(e)},clear:function(){r.clearStorageSync()}},H=function(e,t){void 0===t&&(t={});var n=r.connectSocket(K({url:e},t));return{set onopen(e){n.onOpen(e)},set onmessage(e){n.onMessage(e)},set onclose(e){n.onClose(e)},set onerror(e){n.onError(e)},send:function(e){return n.send({data:e})},close:function(e,t){return n.close({code:e,reason:t})},get readyState(){return n.readyState},CONNECTING:0,OPEN:1,CLOSING:2,CLOSED:3}},G={genAdapter:function(){return{root:{},reqClass:V,wsClass:H,localStorage:B,primaryStorage:M.local}},isMatch:function(){return"undefined"!=typeof r&&!!r.request},runtime:"uni_app"},Y=_((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.getQuery=function(e,t){if("undefined"==typeof window)return!1;var n=t||window.location.search,r=new RegExp("(^|&)"+e+"=([^&]*)(&|$)"),o=n.substr(n.indexOf("?")+1).match(r);return null!=o?o[2]:""},t.getHash=function(e){var t=window.location.hash.match(new RegExp("[#?&/]"+e+"=([^&#]*)"));return t?t[1]:""},t.removeParam=function(e,t){var n=t.split("?")[0],r=[],o=-1!==t.indexOf("?")?t.split("?")[1]:"";if(""!==o){for(var i=(r=o.split("&")).length-1;i>=0;i-=1)r[i].split("=")[0]===e&&r.splice(i,1);n=n+"?"+r.join("&")}return n},t.createPromiseCallback=function(){var e;if(!Promise){(e=function(){}).promise={};var t=function(){throw new Error('Your Node runtime does support ES6 Promises. Set "global.Promise" to your preferred implementation of promises.')};return Object.defineProperty(e.promise,"then",{get:t}),Object.defineProperty(e.promise,"catch",{get:t}),e}var n=new Promise((function(t,n){e=function(e,r){return e?n(e):t(r)}}));return e.promise=n,e},t.getWeixinCode=function(){return t.getQuery("code")||t.getHash("code")},t.getMiniAppCode=function(){return new Promise((function(e,t){wx.login({success:function(t){e(t.code)},fail:function(e){t(e)}})}))},t.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},t.isString=function(e){return"string"==typeof e},t.isUndefined=function(e){return void 0===e},t.isInstanceOf=function(e,t){return e instanceof t},t.isFormData=function(e){return"[object FormData]"===Object.prototype.toString.call(e)},t.genSeqId=function(){return Math.random().toString(16).slice(2)},t.getArgNames=function(e){var t=e.toString();return t.slice(t.indexOf("(")+1,t.indexOf(")")).match(/([^\s,]+)/g)},t.formatUrl=function(e,t,n){void 0===n&&(n={});var r=/\?/.test(t),o="";for(var i in n)""===o?!r&&(t+="?"):o+="&",o+=i+"="+encodeURIComponent(n[i]);return/^http(s)?\:\/\//.test(t+=o)?t:""+e+t}}));g(Y),Y.getQuery,Y.getHash,Y.removeParam,Y.createPromiseCallback,Y.getWeixinCode,Y.getMiniAppCode,Y.isArray,Y.isString,Y.isUndefined,Y.isInstanceOf,Y.isFormData,Y.genSeqId,Y.getArgNames,Y.formatUrl;var z,W,J="dist/index.js",X="./dist/index.d.ts",Q={build:"npm run tsc && webpack",tsc:"tsc -p tsconfig.json","tsc:w":"tsc -p tsconfig.json -w",test:"jest --verbose false -i",e2e:'NODE_ENV=e2e webpack && jest --config="./jest.e2e.config.js"  --verbose false -i "e2e"',start:"webpack-dev-server --hot --open",eslint:'eslint "./**/*.js" "./**/*.ts"',"eslint-fix":'eslint --fix "./**/*.js" "./**/*.ts"',test_web:"npm run tsc && webpack-dev-server --devtool eval-source-map --progress --colors --hot --inline --content-base ./dist --host jimmytest-088bef.tcb.qcloud.la --port 80 --disableHostCheck true --mode development --config webpack.test.js"},Z={type:"git",url:"https://github.com/TencentCloudBase/tcb-js-sdk"},ee=["tcb","js-sdk"],te={"@cloudbase/adapter-interface":"^0.2.0","@cloudbase/adapter-wx_mp":"^0.2.1","@cloudbase/database":"^0.9.8"},ne={"@babel/core":"^7.6.2","@babel/plugin-proposal-class-properties":"^7.5.5","@babel/plugin-proposal-object-rest-spread":"^7.6.2","@babel/plugin-transform-runtime":"^7.6.2","@babel/preset-env":"^7.6.2","@babel/preset-typescript":"^7.6.0","@babel/runtime":"^7.6.2","@types/jest":"^23.1.4","@types/node":"^10.14.4","@types/superagent":"^4.1.4",axios:"^0.19.0","babel-eslint":"^10.0.1","babel-loader":"^8.0.6","babel-polyfill":"^6.26.0",eslint:"^5.16.0","eslint-config-alloy":"^1.4.2","eslint-config-prettier":"^4.1.0","eslint-plugin-prettier":"^3.0.1","eslint-plugin-typescript":"^1.0.0-rc.3",express:"^4.17.1",husky:"^3.1.0",jest:"^24.7.1","jest-puppeteer":"^4.3.0","lint-staged":"^9.5.0","power-assert":"^1.6.1",puppeteer:"^1.20.0","serve-static":"^1.14.1","ts-jest":"^23.10.4","ts-loader":"^6.2.1",typescript:"^3.4.3","typescript-eslint-parser":"^22.0.0",webpack:"^4.41.3","webpack-bundle-analyzer":"^3.4.1","webpack-cli":"^3.3.0","webpack-dev-server":"^3.3.1","webpack-merge":"^4.2.2","webpack-visualizer-plugin":"^0.1.11"},re={hooks:{"pre-commit":"lint-staged"}},oe={name:"tcb-js-sdk",version:"1.3.5",description:"js sdk for tcb",main:J,types:X,scripts:Q,repository:Z,keywords:ee,author:"jimmyjzhang",license:"ISC",dependencies:te,devDependencies:ne,husky:re,"lint-staged":{"*.{js,ts}":["eslint --fix","git add"]}},ie=(z=Object.freeze({__proto__:null,name:"tcb-js-sdk",version:"1.3.5",description:"js sdk for tcb",main:J,types:X,scripts:Q,repository:Z,keywords:ee,author:"jimmyjzhang",license:"ISC",dependencies:te,devDependencies:ne,husky:re,default:oe}))&&z.default||z,se=_((function(e,t){var n=m&&m.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var r=n(ie);t.SDK_VERISON=r.version,t.ACCESS_TOKEN="access_token",t.ACCESS_TOKEN_Expire="access_token_expire",t.REFRESH_TOKEN="refresh_token",t.ANONYMOUS_UUID="anonymous_uuid",t.LOGIN_TYPE_KEY="login_type",t.protocol="undefined"!=typeof location&&"http:"===location.protocol?"http:":"https:",t.BASE_URL="//tcb-api.tencentcloudapi.com/web"}));g(se),se.SDK_VERISON,se.ACCESS_TOKEN,se.ACCESS_TOKEN_Expire,se.REFRESH_TOKEN,se.ANONYMOUS_UUID,se.LOGIN_TYPE_KEY,se.protocol,se.BASE_URL,function(e){e.local="local",e.none="none",e.session="session"}(W||(W={}));var ae=function(){},ce=function(){},ue=Object.freeze({__proto__:null,get StorageType(){return W},AbstractSDKRequest:ae,AbstractStorage:ce,formatUrl:function(e,t,n){void 0===n&&(n={});var r=/\?/.test(t),o="";for(var i in n)""===o?!r&&(t+="?"):o+="&",o+=i+"="+encodeURIComponent(n[i]);return/^http(s)?\:\/\//.test(t+=o)?t:""+e+t}}),fe=_((function(e,t){var n=m&&m.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),r=m&&m.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=m&&m.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},i=m&&m.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n(t,e),t.prototype.get=function(e){return this._request(r(r({},e),{method:"get"}))},t.prototype.post=function(e){return this._request(r(r({},e),{method:"post"}))},t.prototype.upload=function(e){var t=e.data,n=e.file,o=e.name,i=new FormData;for(var s in t)i.append(s,t[s]);return i.append("key",o),i.append("file",n),this._request(r(r({},e),{data:i,method:"post"}))},t.prototype.download=function(e){return o(this,void 0,void 0,(function(){var t,n;return i(this,(function(r){return t=decodeURIComponent(new URL(e.url).pathname.split("/").pop()||""),(n=document.createElement("a")).href=e.url,n.setAttribute("download",t),n.setAttribute("target","_blank"),document.body.appendChild(n),n.click(),[2,new Promise((function(t){t({statusCode:200,tempFilePath:e.url})}))]}))}))},t.prototype._request=function(e){var t=String(e.method).toLowerCase()||"get";return new Promise((function(n){var r=e.url,o=e.headers,i=void 0===o?{}:o,s=e.data,a=e.responseType,c=Y.formatUrl(se.protocol,r,"get"===t?s:{}),u=new XMLHttpRequest;for(var f in u.open(t,c),a&&(u.responseType=a),i)u.setRequestHeader(f,i[f]);u.onreadystatechange=function(){if(4===u.readyState){var e={statusCode:u.status};try{e.data=JSON.parse(u.responseText)}catch(e){}n(e)}},u.send("post"===t&&Y.isFormData(s)?s:JSON.stringify(s||{}))}))},t}(ue.AbstractSDKRequest);t.WebRequest=s,t.genAdapter=function(){return{root:window,reqClass:s,wsClass:WebSocket,localStorage:localStorage,sessionStorage:sessionStorage}}}));g(fe),fe.WebRequest,fe.genAdapter;var le=_((function(e,t){var n=m&&m.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(fe);!function(e){e.WEB="web",e.WX_MP="wx_mp"}(r=t.RUNTIME||(t.RUNTIME={})),t.useAdapters=function(e){for(var t=0,n=Y.isArray(e)?e:[e];t<n.length;t++){var r=n[t],o=r.isMatch,i=r.genAdapter,s=r.runtime;if(o())return{adapter:i(),runtime:s}}},t.useDefaultAdapter=function(){return{adapter:o.genAdapter(),runtime:r.WEB}},t.Adapter={adapter:null,runtime:void 0}}));g(le),le.RUNTIME,le.useAdapters,le.useDefaultAdapter,le.Adapter;var pe=_((function(e,t){var n=m&&m.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){switch(le.Adapter.adapter.primaryStorage||e){case"local":this.storageClass=le.Adapter.adapter.localStorage||new o;break;case"none":this.storageClass=new o;break;default:this.storageClass=le.Adapter.adapter.sessionStorage||new o}}return e.prototype.setStore=function(e,t,n){try{if(!this.storageClass)return}catch(e){return}var r,o={};o.version=n||"localCachev1",o.content=t,r=JSON.stringify(o);try{this.storageClass.setItem(e,r)}catch(e){return}},e.prototype.getStore=function(e,t){try{if(!this.storageClass)return}catch(e){return""}t=t||"localCachev1";var n=this.storageClass.getItem(e);return n&&n.indexOf(t)>=0?JSON.parse(n).content:""},e.prototype.removeStore=function(e){this.storageClass.removeItem(e)},e}();t.Cache=r;var o=function(e){function t(){var t=e.call(this)||this;return le.Adapter.adapter.root.tcbObject||(le.Adapter.adapter.root.tcbObject={}),t}return n(t,e),t.prototype.setItem=function(e,t){le.Adapter.adapter.root.tcbObject[e]=t},t.prototype.getItem=function(e){return le.Adapter.adapter.root.tcbObject[e]},t.prototype.removeItem=function(e){delete le.Adapter.adapter.root.tcbObject[e]},t.prototype.clear=function(){delete le.Adapter.adapter.root.tcbObject},t}(ue.AbstractStorage)}));g(pe),pe.Cache;var de=_((function(e,t){var n=m&&m.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),r=m&&m.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],s=0,a=i.length;s<a;s++,o++)r[o]=i[s];return r};Object.defineProperty(t,"__esModule",{value:!0});var o=function(e,t){this.data=t||null,this.name=e};t.IEvent=o;var i=function(e){function t(t,n){var r=e.call(this,"error",{error:t,data:n})||this;return r.error=t,r}return n(t,e),t}(o);t.IErrorEvent=i;var s=function(){function e(){this._listeners={}}return e.prototype.on=function(e,t){return function(e,t,n){n[e]=n[e]||[],n[e].push(t)}(e,t,this._listeners),this},e.prototype.off=function(e,t){return function(e,t,n){if(n&&n[e]){var r=n[e].indexOf(t);-1!==r&&n[e].splice(r,1)}}(e,t,this._listeners),this},e.prototype.fire=function(e,t){if(Y.isInstanceOf(e,i))return console.error(e.error),this;var n=Y.isString(e)?new o(e,t||{}):e,s=n.name;if(this._listens(s)){n.target=this;for(var a=0,c=this._listeners[s]?r(this._listeners[s]):[];a<c.length;a++)c[a].call(this,n)}return this},e.prototype._listens=function(e){return this._listeners[e]&&this._listeners[e].length>0},e}();t.IEventEmitter=s;var a=new s;t.addEventListener=function(e,t){a.on(e,t)},t.activateEvent=function(e,t){void 0===t&&(t={}),a.fire(e,t)},t.removeEventListener=function(e,t){a.off(e,t)},t.EVENTS={LOGIN_STATE_CHANGED:"loginStateChanged",LOGIN_STATE_EXPIRE:"loginStateExpire",LOGIN_TYPE_CHANGE:"loginTypeChanged",ANONYMOUS_CONVERTED:"anonymousConverted",REFRESH_ACCESS_TOKEN:"refreshAccessToken"}}));g(de),de.IEvent,de.IErrorEvent,de.IEventEmitter,de.addEventListener,de.activateEvent,de.removeEventListener,de.EVENTS;var he=_((function(e,t){var n=m&&m.__assign||function(){return(n=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},r=m&&m.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},o=m&&m.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=["auth.getJwt","auth.logout","auth.signInWithTicket","auth.signInAnonymously"],s={"X-SDK-Version":se.SDK_VERISON};function a(e,t,r){var o=e[t];e[t]=function(t){var i={},s={};r.forEach((function(n){var r=n.call(e,t),o=r.data,a=r.headers;Object.assign(i,o),Object.assign(s,a)}));var a=t.data;return a&&function(){if(Y.isFormData(a))for(var e in i)a.append(e,i[e]);else t.data=n(n({},a),i)}(),t.headers=n(n({},t.headers||{}),s),o.call(e,t)}}function c(){var e=Y.genSeqId();return{data:{seqId:e},headers:n(n({},s),{"x-seqid":e})}}var u=function(){function e(e){void 0===e&&(e={}),this.config=e,this.cache=new pe.Cache(e.persistence),this.accessTokenKey=se.ACCESS_TOKEN+"_"+e.env,this.accessTokenExpireKey=se.ACCESS_TOKEN_Expire+"_"+e.env,this.refreshTokenKey=se.REFRESH_TOKEN+"_"+e.env,this.anonymousUuidKey=se.ANONYMOUS_UUID+"_"+e.env,this.loginTypeKey=se.LOGIN_TYPE_KEY+"_"+e.env,this._reqClass=new le.Adapter.adapter.reqClass,a(this._reqClass,"post",[c]),a(this._reqClass,"upload",[c]),a(this._reqClass,"download",[c])}return e.prototype.post=function(e){return r(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this._reqClass.post(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.upload=function(e){return r(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this._reqClass.upload(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.download=function(e){return r(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this._reqClass.download(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.refreshAccessToken=function(){return r(this,void 0,void 0,(function(){var e,t,n;return o(this,(function(r){switch(r.label){case 0:this._refreshAccessTokenPromise||(this._refreshAccessTokenPromise=this._refreshAccessToken()),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this._refreshAccessTokenPromise];case 2:return e=r.sent(),[3,4];case 3:return n=r.sent(),t=n,[3,4];case 4:if(this._refreshAccessTokenPromise=null,this._shouldRefreshAccessTokenHook=null,t)throw t;return[2,e]}}))}))},e.prototype._refreshAccessToken=function(){return r(this,void 0,void 0,(function(){var e,t,n,r;return o(this,(function(o){switch(o.label){case 0:if(this.cache.removeStore(this.accessTokenKey),this.cache.removeStore(this.accessTokenExpireKey),!(e=this.cache.getStore(this.refreshTokenKey)))throw new Error("[tcb-js-sdk] 未登录CloudBase");return t={refresh_token:e},this.cache.getStore(this.loginTypeKey)===ve.LOGINTYPE.ANONYMOUS&&(t.anonymous_uuid=this.cache.getStore(this.anonymousUuidKey)),[4,this.request("auth.getJwt",t)];case 1:if((n=o.sent()).data.code)throw"SIGN_PARAM_INVALID"!==(r=n.data.code)&&"REFRESH_TOKEN_EXPIRED"!==r&&"INVALID_REFRESH_TOKEN"!==r||(de.activateEvent(de.EVENTS.LOGIN_STATE_EXPIRE),this.cache.removeStore(this.refreshTokenKey)),new Error("[tcb-js-sdk] 刷新access token失败："+n.data.code);return n.data.access_token?(de.activateEvent(de.EVENTS.REFRESH_ACCESS_TOKEN),this.cache.setStore(this.accessTokenKey,n.data.access_token),this.cache.setStore(this.accessTokenExpireKey,n.data.access_token_expire+Date.now()),de.activateEvent(de.EVENTS.LOGIN_TYPE_CHANGE,n.data.login_type),[2,{accessToken:n.data.access_token,accessTokenExpire:n.data.access_token_expire}]):(n.data.refresh_token&&(this.cache.removeStore(this.refreshTokenKey),this.cache.setStore(this.refreshTokenKey,n.data.refresh_token),this._refreshAccessToken()),[2])}}))}))},e.prototype.getAccessToken=function(){return r(this,void 0,void 0,(function(){var e,t,n,r;return o(this,(function(o){switch(o.label){case 0:return e=this.cache.getStore(this.accessTokenKey),t=this.cache.getStore(this.accessTokenExpireKey),n=!0,(r=this._shouldRefreshAccessTokenHook)?[4,this._shouldRefreshAccessTokenHook(e,t)]:[3,2];case 1:r=!o.sent(),o.label=2;case 2:return r&&(n=!1),(!e||!t||t<Date.now())&&n?[2,this.refreshAccessToken()]:[2,{accessToken:e,accessTokenExpire:t}]}}))}))},e.prototype.request=function(e,t,s){return r(this,void 0,void 0,(function(){var r,a,c,u,f,l,p,d,h,v,y,m;return o(this,(function(o){switch(o.label){case 0:return r="application/x-www-form-urlencoded",a=n({action:e,env:this.config.env,dataVersion:"2019-08-16"},t),-1!==i.indexOf(e)?[3,2]:(c=a,[4,this.getAccessToken()]);case 1:c.access_token=o.sent().accessToken,o.label=2;case 2:if("storage.uploadFile"===e){for(f in u=new FormData)u.hasOwnProperty(f)&&void 0!==u[f]&&u.append(f,a[f]);r="multipart/form-data"}else r="application/json;charset=UTF-8",u=a;return l={headers:{"content-type":r}},s&&s.onUploadProgress&&(l.onUploadProgress=s.onUploadProgress),p=t.parse,d=t.query,h=t.search,v={env:this.config.env},p&&(v.parse=!0),d&&(v=n(n({},d),v)),y=Y.formatUrl(se.protocol,se.BASE_URL,v),h&&(y+=h),[4,this.post(n({url:y,data:u},l))];case 3:if(m=o.sent(),200!==Number(m.status)&&200!==Number(m.statusCode)||!m.data)throw new Error("network request error");return[2,m]}}))}))},e.prototype.send=function(e,t){return void 0===t&&(t={}),r(this,void 0,void 0,(function(){var n,r,s;return o(this,(function(o){switch(o.label){case 0:return n=setTimeout((function(){console.warn("Database operation is longer than 3s. Please check query performance and your network environment.")}),3e3),[4,this.request(e,t,{onUploadProgress:t.onUploadProgress})];case 1:return r=o.sent(),clearTimeout(n),"ACCESS_TOKEN_EXPIRED"!==r.data.code||-1!==i.indexOf(e)?[3,4]:[4,this.refreshAccessToken()];case 2:return o.sent(),[4,this.request(e,t,{onUploadProgress:t.onUploadProgress})];case 3:if((s=o.sent()).data.code)throw new Error("["+s.data.code+"] "+s.data.message);return[2,s.data];case 4:if(r.data.code)throw new Error("["+r.data.code+"] "+r.data.message);return[2,r.data]}}))}))},e}();t.Request=u}));g(he),he.Request;var ve=_((function(e,t){var n,r=m&&m.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},o=m&&m.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.ANONYMOUS="ANONYMOUS",e.WECHAT="WECHAT",e.CUSTOM="CUSTOM",e.NULL="NULL"}(n=t.LOGINTYPE||(t.LOGINTYPE={}));var i=function(){function e(e){this._loginType=n.NULL,this.config=e,this.onLoginTypeChanged=this.onLoginTypeChanged.bind(this),de.addEventListener(de.EVENTS.LOGIN_TYPE_CHANGE,this.onLoginTypeChanged)}return e.prototype.init=function(){this.httpRequest=new he.Request(this.config),this.cache=new pe.Cache(this.config.persistence),this.accessTokenKey=se.ACCESS_TOKEN+"_"+this.config.env,this.accessTokenExpireKey=se.ACCESS_TOKEN_Expire+"_"+this.config.env,this.refreshTokenKey=se.REFRESH_TOKEN+"_"+this.config.env,this.loginTypeKey=se.LOGIN_TYPE_KEY+"_"+this.config.env},e.prototype.onLoginTypeChanged=function(e){this._loginType=e.data,this.cache.setStore(this.loginTypeKey,this._loginType)},Object.defineProperty(e.prototype,"loginType",{get:function(){return this._loginType},enumerable:!0,configurable:!0}),e.prototype.setRefreshToken=function(e){this.cache.removeStore(this.accessTokenKey),this.cache.removeStore(this.accessTokenExpireKey),this.cache.setStore(this.refreshTokenKey,e)},e.prototype.getRefreshTokenByWXCode=function(e,t,n){return r(this,void 0,void 0,(function(){var r;return o(this,(function(o){return r=le.Adapter.runtime===le.RUNTIME.WX_MP?"1":"0",[2,this.httpRequest.send("auth.getJwt",{appid:e,loginType:t,code:n,hybridMiniapp:r}).then((function(e){if(e.code)throw new Error("[tcb-js-sdk] 微信登录失败: "+e.code);if(e.refresh_token)return{refreshToken:e.refresh_token,accessToken:e.access_token,accessTokenExpire:e.access_token_expire};throw new Error("[tcb-js-sdk] getJwt未返回refreshToken")}))]}))}))},e}();t.default=i}));g(ve),ve.LOGINTYPE;var ye=_((function(e,t){var n=m&&m.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),r=m&&m.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},o=m&&m.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=m&&m.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var s,a,c=i(Y),u=i(ve);!function(e){e.snsapi_base="snsapi_base",e.snsapi_userinfo="snsapi_userinfo",e.snsapi_login="snsapi_login"}(s||(s={})),function(e){e.redirect="redirect",e.prompt="prompt"}(a||(a={}));var f={},l=function(e){function t(t,n,r,o,i){var s=e.call(this,t)||this;return s.config=t,s.appid=n,s.scope=le.Adapter.runtime===le.RUNTIME.WX_MP?"snsapi_base":r,s.state=i||"weixin",s.loginMode=o||"redirect",s}return n(t,e),t.prototype.signIn=function(){return r(this,void 0,void 0,(function(){var e,t,n;return o(this,(function(r){switch(r.label){case 0:f[this.config.env]||(f[this.config.env]=this._signIn()),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,f[this.config.env]];case 2:return e=r.sent(),[3,4];case 3:return n=r.sent(),t=n,[3,4];case 4:if(f[this.config.env]=null,t)throw t;return[2,e]}}))}))},t.prototype._signIn=function(){return r(this,void 0,void 0,(function(){var e,t,n,r,i,a;return o(this,(function(o){switch(o.label){case 0:if(e=this.cache.getStore(this.accessTokenKey),t=this.cache.getStore(this.accessTokenExpireKey),e){if(t&&t>Date.now())return[2,{credential:{accessToken:e,refreshToken:this.cache.getStore(this.refreshTokenKey)}}];this.cache.removeStore(this.accessTokenKey),this.cache.removeStore(this.accessTokenExpireKey)}if(!1===Object.values(s).includes(s[this.scope]))throw new Error("错误的scope类型");return le.Adapter.runtime!==le.RUNTIME.WX_MP?[3,2]:[4,c.getMiniAppCode()];case 1:return n=o.sent(),[3,4];case 2:return[4,c.getWeixinCode()];case 3:if(!(n=o.sent()))return[2,this.redirect()];o.label=4;case 4:return r=function(e){switch(e){case s.snsapi_login:return"WECHAT-OPEN";default:return"WECHAT-PUBLIC"}}(this.scope),[4,this.getRefreshTokenByWXCode(this.appid,r,n)];case 5:return i=o.sent(),a=i.refreshToken,this.cache.setStore(this.refreshTokenKey,a),i.accessToken&&this.cache.setStore(this.accessTokenKey,i.accessToken),i.accessTokenExpire&&this.cache.setStore(this.accessTokenExpireKey,i.accessTokenExpire+Date.now()),de.activateEvent(de.EVENTS.LOGIN_STATE_CHANGED),de.activateEvent(de.EVENTS.LOGIN_TYPE_CHANGE,u.LOGINTYPE.WECHAT),[2,{credential:{refreshToken:a}}]}}))}))},t.prototype.redirect=function(){var e=c.removeParam("code",location.href);e=c.removeParam("state",e),e=encodeURIComponent(e);var t="//open.weixin.qq.com/connect/oauth2/authorize";"snsapi_login"===this.scope&&(t="//open.weixin.qq.com/connect/qrconnect"),"redirect"===a[this.loginMode]&&(location.href=t+"?appid="+this.appid+"&redirect_uri="+e+"&response_type=code&scope="+this.scope+"&state="+this.state+"#wechat_redirect")},t}(u.default);t.default=l}));g(ye);var me=_((function(e,t){var n=m&&m.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),r=m&&m.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=m&&m.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},i=m&&m.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},s=m&&m.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=s(ve),c=function(e){function t(t){var n=e.call(this,r(r({},t),{persistence:"local"}))||this;return n._anonymousUuidKey=se.ANONYMOUS_UUID+"_"+n.config.env,n._loginTypeKey=se.LOGIN_TYPE_KEY+"_"+n.config.env,n}return n(t,e),t.prototype.init=function(){e.prototype.init.call(this)},t.prototype.signIn=function(){return o(this,void 0,void 0,(function(){var e,t,n;return i(this,(function(r){switch(r.label){case 0:return e=this.cache.getStore(this._anonymousUuidKey)||void 0,t=this.cache.getStore(this.refreshTokenKey)||void 0,[4,this.httpRequest.send("auth.signInAnonymously",{anonymous_uuid:e,refresh_token:t})];case 1:return(n=r.sent()).uuid&&n.refresh_token?(this._setAnonymousUUID(n.uuid),this.setRefreshToken(n.refresh_token),[4,this.httpRequest.refreshAccessToken()]):[3,3];case 2:return r.sent(),de.activateEvent(de.EVENTS.LOGIN_STATE_CHANGED),de.activateEvent(de.EVENTS.LOGIN_TYPE_CHANGE,a.LOGINTYPE.ANONYMOUS),[2,{credential:{refreshToken:n.refresh_token}}];case 3:throw new Error("[tcb-js-sdk] 匿名登录失败")}}))}))},t.prototype.linkAndRetrieveDataWithTicket=function(e){return o(this,void 0,void 0,(function(){var t,n,r;return i(this,(function(o){switch(o.label){case 0:return t=this.cache.getStore(this._anonymousUuidKey),n=this.cache.getStore(this.refreshTokenKey),[4,this.httpRequest.send("auth.linkAndRetrieveDataWithTicket",{anonymous_uuid:t,refresh_token:n,ticket:e})];case 1:return(r=o.sent()).refresh_token?(this._clearAnonymousUUID(),this.setRefreshToken(r.refresh_token),[4,this.httpRequest.refreshAccessToken()]):[3,3];case 2:return o.sent(),de.activateEvent(de.EVENTS.ANONYMOUS_CONVERTED,{refresh_token:r.refresh_token}),de.activateEvent(de.EVENTS.LOGIN_TYPE_CHANGE,a.LOGINTYPE.CUSTOM),[2,{credential:{refreshToken:r.refresh_token}}];case 3:throw new Error("[tcb-js-sdk] 匿名转化失败")}}))}))},t.prototype.getAllStore=function(){var e={};return e[this.refreshTokenKey]=this.cache.getStore(this.refreshTokenKey)||"",e[this._loginTypeKey]=this.cache.getStore(this._loginTypeKey)||"",e[this.accessTokenKey]=this.cache.getStore(this.accessTokenKey)||"",e[this.accessTokenExpireKey]=this.cache.getStore(this.accessTokenExpireKey)||"",e},t.prototype._setAnonymousUUID=function(e){this.cache.removeStore(this._anonymousUuidKey),this.cache.setStore(this._anonymousUuidKey,e),this.cache.setStore(this._loginTypeKey,a.LOGINTYPE.ANONYMOUS)},t.prototype._clearAnonymousUUID=function(){this.cache.removeStore(this._anonymousUuidKey)},t}(a.default);t.AnonymousAuthProvider=c}));g(me),me.AnonymousAuthProvider;var ge=_((function(e,t){var n=m&&m.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),r=m&&m.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=m&&m.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},i=m&&m.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},s=m&&m.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},a=m&&m.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var c=s(ye),u=a(ve),f=function(e){function t(t){var n=e.call(this,t)||this;return n.config=t,n}return n(t,e),t.prototype.init=function(){e.prototype.init.call(this),this.customAuthProvider=new u.default(this.config),this.customAuthProvider.init()},t.prototype.weixinAuthProvider=function(e){var t=e.appid,n=e.scope,r=e.loginMode,o=e.state,i=new c.default(this.config,t,n,r,o);return i.init(),i},t.prototype.signInAnonymously=function(){return o(this,void 0,void 0,(function(){var e=this;return i(this,(function(t){switch(t.label){case 0:return this._anonymousAuthProvider||(this._anonymousAuthProvider=new me.AnonymousAuthProvider(this.config),this._anonymousAuthProvider.init()),de.addEventListener(de.EVENTS.LOGIN_TYPE_CHANGE,(function(t){if(t&&t.data===u.LOGINTYPE.ANONYMOUS){var n=e._anonymousAuthProvider.getAllStore();for(var r in n)n[r]&&e.httpRequest.cache.setStore(r,n[r])}})),[4,this._anonymousAuthProvider.signIn()];case 1:return[2,t.sent()]}}))}))},t.prototype.linkAndRetrieveDataWithTicket=function(e){return o(this,void 0,void 0,(function(){var t=this;return i(this,(function(n){switch(n.label){case 0:return this._anonymousAuthProvider||(this._anonymousAuthProvider=new me.AnonymousAuthProvider(this.config),this._anonymousAuthProvider.init()),de.addEventListener(de.EVENTS.ANONYMOUS_CONVERTED,(function(e){var n=e.data.refresh_token;n&&t.httpRequest.cache.setStore(t.refreshTokenKey,n)})),[4,this._anonymousAuthProvider.linkAndRetrieveDataWithTicket(e)];case 1:return[2,n.sent()]}}))}))},t.prototype.signOut=function(){return o(this,void 0,void 0,(function(){var e,t,n,r,o,s,a;return i(this,(function(i){switch(i.label){case 0:if(this.loginType===u.LOGINTYPE.ANONYMOUS)throw new Error("[tcb-js-sdk] 匿名用户不支持登出操作");return e=this.httpRequest,t=e.cache,n=e.refreshTokenKey,r=e.accessTokenKey,o=e.accessTokenExpireKey,(s=t.getStore(n))?[4,this.httpRequest.send("auth.logout",{refresh_token:s})]:[2];case 1:return a=i.sent(),t.removeStore(n),t.removeStore(r),t.removeStore(o),de.activateEvent(de.EVENTS.LOGIN_STATE_CHANGED),de.activateEvent(de.EVENTS.LOGIN_TYPE_CHANGE,u.LOGINTYPE.NULL),[2,a]}}))}))},t.prototype.getAccessToken=function(){return o(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return e={},[4,this.httpRequest.getAccessToken()];case 1:return[2,(e.accessToken=t.sent().accessToken,e.env=this.config.env,e)]}}))}))},t.prototype.onLoginStateExpire=function(e){de.addEventListener("loginStateExpire",e)},t.prototype.getLoginState=function(){return o(this,void 0,void 0,(function(){var e,t,n,r,o;return i(this,(function(i){switch(i.label){case 0:if(e=this.httpRequest,t=e.cache,n=e.refreshTokenKey,r=e.accessTokenKey,!(o=t.getStore(n)))return[3,5];i.label=1;case 1:return i.trys.push([1,3,,4]),[4,this.httpRequest.refreshAccessToken()];case 2:return i.sent(),[3,4];case 3:return i.sent(),[2,null];case 4:return[2,{isAnonymous:this.loginType===u.LOGINTYPE.ANONYMOUS,credential:{refreshToken:o,accessToken:t.getStore(r)}}];case 5:return[2,null]}}))}))},t.prototype.signInWithTicket=function(e){return o(this,void 0,void 0,(function(){var t,n,r,o;return i(this,(function(i){switch(i.label){case 0:if("string"!=typeof e)throw new Error("ticket must be a string");return t=this.httpRequest,n=t.cache,r=t.refreshTokenKey,[4,this.httpRequest.send("auth.signInWithTicket",{ticket:e,refresh_token:n.getStore(r)||""})];case 1:return(o=i.sent()).refresh_token?(this.customAuthProvider.setRefreshToken(o.refresh_token),[4,this.httpRequest.refreshAccessToken()]):[3,3];case 2:return i.sent(),de.activateEvent(de.EVENTS.LOGIN_STATE_CHANGED),de.activateEvent(de.EVENTS.LOGIN_TYPE_CHANGE,u.LOGINTYPE.CUSTOM),[2,{credential:{refreshToken:o.refresh_token}}];case 3:throw new Error("[tcb-js-sdk] 自定义登录失败")}}))}))},t.prototype.shouldRefreshAccessToken=function(e){this.httpRequest._shouldRefreshAccessTokenHook=e.bind(this)},t.prototype.getUserInfo=function(){return this.httpRequest.send("auth.getUserInfo",{}).then((function(e){return e.code?e:r(r({},e.data),{requestId:e.seqId})}))},t}(u.default);t.default=f}));g(ge);var _e=_((function(e,t){var n=m&&m.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},r=m&&m.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.uploadFile=function(e,t){t=t||Y.createPromiseCallback();var n=new he.Request(this.config),r=e.cloudPath,o=e.filePath,i=e.onUploadProgress,s=e.fileType||"image";return n.send("storage.getUploadMetadata",{path:r}).then((function(e){var a=e.data,c=a.url,u=a.authorization,f=a.token,l=a.fileId,p=a.cosFileId,d=e.requestId,h={key:r,signature:u,"x-cos-meta-fileid":p,success_action_status:"201","x-cos-security-token":f};n.upload({url:c,data:h,file:o,name:r,fileType:s,onUploadProgress:i}).then((function(e){201===e.statusCode?t(null,{fileID:l,requestId:d}):t(new Error("STORAGE_REQUEST_FAIL: "+e.data))})).catch((function(e){t(e)}))})).catch((function(e){t(e)})),t.promise},t.deleteFile=function(e,t){var n=e.fileList;if(t=t||Y.createPromiseCallback(),!n||!Array.isArray(n))return{code:"INVALID_PARAM",message:"fileList必须是非空的数组"};for(var r=0,o=n;r<o.length;r++){var i=o[r];if(!i||"string"!=typeof i)return{code:"INVALID_PARAM",message:"fileList的元素必须是非空的字符串"}}var s={fileid_list:n};return new he.Request(this.config).send("storage.batchDeleteFile",s).then((function(e){e.code?t(null,e):t(null,{fileList:e.data.delete_list,requestId:e.requestId})})).catch((function(e){t(e)})),t.promise},t.getTempFileURL=function(e,t){var n=e.fileList;t=t||Y.createPromiseCallback(),n&&Array.isArray(n)||t(null,{code:"INVALID_PARAM",message:"fileList必须是非空的数组"});for(var r=[],o=0,i=n;o<i.length;o++){var s=i[o];"object"==typeof s?(s.hasOwnProperty("fileID")&&s.hasOwnProperty("maxAge")||t(null,{code:"INVALID_PARAM",message:"fileList的元素必须是包含fileID和maxAge的对象"}),r.push({fileid:s.fileID,max_age:s.maxAge})):"string"==typeof s?r.push({fileid:s}):t(null,{code:"INVALID_PARAM",message:"fileList的元素必须是字符串"})}var a={file_list:r};return new he.Request(this.config).send("storage.batchGetDownloadUrl",a).then((function(e){e.code?t(null,e):t(null,{fileList:e.data.download_list,requestId:e.requestId})})).catch((function(e){t(e)})),t.promise},t.downloadFile=function(e,o){var i=e.fileID;return n(this,void 0,void 0,(function(){var e,n,s,a,c;return r(this,(function(r){switch(r.label){case 0:return[4,t.getTempFileURL.call(this,{fileList:[{fileID:i,maxAge:600}]})];case 1:return e=r.sent(),"SUCCESS"!==(n=e.fileList[0]).code?[2,o?o(n):new Promise((function(e){e(n)}))]:(s=n.download_url,s=encodeURI(s),a=new he.Request(this.config),o?[4,a.download({url:s})]:[3,3]);case 2:return c=r.sent(),o(c),[3,4];case 3:return[2,a.download({url:s})];case 4:return[2]}}))}))}}));g(_e),_e.uploadFile,_e.deleteFile,_e.getTempFileURL,_e.downloadFile;var be=_((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.callFunction=function(e,t){var n,r=e.name,o=e.data,i=e.query,s=e.parse,a=e.search,c=t||Y.createPromiseCallback();try{n=o?JSON.stringify(o):""}catch(e){return Promise.reject(e)}if(!r)return Promise.reject(new Error("函数名不能为空"));var u={query:i,parse:s,search:a,function_name:r,request_data:n};return new he.Request(this.config).send("functions.invokeFunction",u).then((function(e){if(e.code)c(null,e);else{var t=e.data.response_data;if(s)c(null,{result:t,requestId:e.requestId});else try{t=JSON.parse(e.data.response_data),c(null,{result:t,requestId:e.requestId})}catch(e){c(new Error("response data must be json"))}}return c.promise})).catch((function(e){c(e)})),c.promise}}));g(be),be.callFunction;var we=g(_((function(e){var t=m&&m.__assign||function(){return(t=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},n=m&&m.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},r=m&&m.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},o=n(G),i=n(ge),s=r(_e),a=r(be),c={timeout:15e3},u=new(function(){function e(e){var t=this;this.config=e||this.config,this.authObj=void 0,de.addEventListener(de.EVENTS.LOGIN_TYPE_CHANGE,(function(e){e.data===ve.LOGINTYPE.ANONYMOUS&&(t.config.persistence="local")}))}return e.prototype.init=function(n){return this.config=t(t({},c),n),le.Adapter.adapter||this._useDefaultAdapter(),new e(this.config)},e.prototype.auth=function(e){var n=(void 0===e?{}:e).persistence;return this.authObj?this.authObj:(this.config=t(t({},this.config),{persistence:n||le.Adapter.adapter.primaryStorage||"session"}),this.authObj=new i.default(this.config),this.authObj.init(),this.authObj)},e.prototype.on=function(e,t){return de.addEventListener.apply(this,[e,t])},e.prototype.off=function(e,t){return de.removeEventListener.apply(this,[e,t])},e.prototype.callFunction=function(e,t){return a.callFunction.apply(this,[e,t])},e.prototype.deleteFile=function(e,t){return s.deleteFile.apply(this,[e,t])},e.prototype.getTempFileURL=function(e,t){return s.getTempFileURL.apply(this,[e,t])},e.prototype.downloadFile=function(e,t){return s.downloadFile.apply(this,[e,t])},e.prototype.uploadFile=function(e,t){return s.uploadFile.apply(this,[e,t])},e.prototype.useAdapters=function(e){var t=le.useAdapters(e)||{},n=t.adapter,r=t.runtime;n&&(le.Adapter.adapter=n),r&&(le.Adapter.runtime=r)},e.prototype._useDefaultAdapter=function(){var e=le.useDefaultAdapter(),t=e.adapter,n=e.runtime;le.Adapter.adapter=t,le.Adapter.runtime=n},e}());u.useAdapters(o.default);try{window.tcb=u}catch(m){}e.exports=u})));we.useAdapters(G);var xe=we,Oe=xe.init;xe.init=function(e){e.env=e.spaceId;var t=Oe.call(this,e);t.config.provider="tencent",t.config.spaceId=e.spaceId;var n=t.auth;return t.auth=function(e){var t=n.call(this,e);return["linkAndRetrieveDataWithTicket","signInAnonymously","signOut","getAccessToken","getLoginState","signInWithTicket","getUserInfo"].forEach((function(e){t[e]=x(t[e]).bind(t)})),t},["uploadFile","deleteFile","getTempFileURL","downloadFile"].forEach((function(e){t[e]=x(t[e]).bind(t)})),t};var Ae,Se,ke="uniIdToken";function Ee(e){!Ae&&S&&(Ae={PLATFORM:"mp-qq",OS:T,APPID:O.appid,CLIENT_SDK_VERSION:k},Se={ak:O.appid,p:"android"===T?"a":"i",ut:I(),uuid:j()});var t=JSON.parse(JSON.stringify(e.data||{})),n=e.name,r=this.config.spaceId,o={tencent:"t",aliyun:"a"}[this.config.provider],i=Object.assign({},Se,{fn:n,sid:r,pvd:o}),s=this.adapter.getStore(ke);return Object.assign(t,{clientInfo:Ae,uniCloudClientInfo:encodeURIComponent(JSON.stringify(i)),uniIdToken:s}),e.data=t,e}var Te={request:function(e){var t=e.url,n=e.method,o=void 0===n?"POST":n,i=e.data,s=e.dataType,a=void 0===s?"json":s,c=e.header,u=e.success,f=e.fail,l=e.complete;return r.request({url:t,method:o,data:i,dataType:a,header:c,success:u,fail:f,complete:l})},uploadFile:function(e){var t=e.url,n=e.formData,o=e.name,i=e.filePath,s=e.fileType,a=e.header,c=e.success,u=e.fail;return r.uploadFile({url:t,formData:n,name:o,filePath:i,fileType:s,header:a,success:c,fail:u})},setStore:function(e,t){return r.setStorageSync(e,t)},getStore:function(e){return r.getStorageSync(e)}},$e=new(function(){function e(){s(this,e),this.adapter=Te}return i(e,[{key:"init",value:function(e){var t={},n=!1!==e.debugFunction&&!1;switch(e.provider){case"tencent":t=xe.init(Object.assign(e,{useDebugFunction:n}));break;case"aliyun":t=U.init(Object.assign(e,{useDebugFunction:n}));break;default:throw new Error("未提供正确的provider参数")}if(t.isReady=!1,S||(t.isReady=!0),!1!==e.autoSignIn&&S){var o=t.auth();t.initSignIn=o.getLoginState().then((function(e){return e?Promise.resolve():o.signInAnonymously()})).then((function(){return new Promise((function(e){setTimeout((function(){T=r.getSystemInfoSync().platform,E=r.getStorageSync($)||P(32),e()}),0)}))})).then((function(){t.isReady=!0}))}return function(e){var t=e.callFunction;e.callFunction=function(e){var n,r=this;n=this.isReady?Promise.resolve():this.initSignIn;var o=Ee.call(this,e),i={aliyun:"aliyun",tencent:"tcb"}[this.config.provider];return n.then((function(){return new Promise((function(n,s){t.call(r,o).then((function(t){if(r.config.useDebugFunction&&t&&t.requestId){var o=JSON.stringify({spaceId:r.config.spaceId,functionName:e.name,requestId:t.requestId});console.log("[".concat(i,"-request]").concat(o,"[/").concat(i,"-request]"))}n(t)})).catch((function(t){if(r.config.useDebugFunction&&t&&t.requestId){var n=JSON.stringify({spaceId:r.config.spaceId,functionName:e.name,requestId:t.requestId});console.log("[".concat(i,"-request]").concat(n,"[/").concat(i,"-request]"))}t&&t.message&&(t.message="[".concat(e.name,"]: ").concat(t.message)),s(t)}))}))}))};var n=e.callFunction;e.callFunction=function(e){return x(n).call(this,e)}}(t),t.init=this.init,t.adapter=this.adapter,t}},{key:"setAdapter",value:function(e){this.adapter=e}}]),e}());if(S)try{var Pe={};1===[].length&&(Pe=[][0]),$e=$e.init(Pe)}catch(m){["auth","callFunction","uploadFile","deleteFile","getTempFileURL","downloadFile"].forEach((function(e){$e[e]=function(){var e=[].length>0?"应用有多个服务空间，请通过uniCloud.init方法指定要使用的服务空间":"应用未关联服务空间，请在cloudfunctions目录右键关联服务空间";return console.error(e),Promise.reject(new A({code:"SYS_ERR",message:e}))}}))}var je=$e,Ie=je;t.default=Ie}).call(this,n(/*! ./../../../../../webpack/buildin/global.js */3),n(/*! ./node_modules/@dcloudio/uni-mp-qq/dist/index.js */1)["default"])},33:
/*!***********************************************************************************!*\
  !*** /Users/sharknet/Documents/HBuilderProjects/万能工具集/pages.json?{"type":"stat"} ***!
  \***********************************************************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={appid:"__UNI__FF3633F"};t.default=r},4:
/*!*******************************************************************!*\
  !*** /Users/sharknet/Documents/HBuilderProjects/万能工具集/pages.json ***!
  \*******************************************************************/
/*! no static exports found */function(e,t){},84:
/*!************************************************************************!*\
  !*** /Users/sharknet/Documents/HBuilderProjects/万能工具集/utils/weight.js ***!
  \************************************************************************/
/*! no static exports found */function(e,t){function n(e,t){return e/(t*t)}function r(e,t,n,r){return[{current:!1,done:!1,text:"体重状态: ",desc:e},{done:!1,current:!1,text:"危险性处于: "+t+"状态",desc:""},{done:!1,current:!1,text:"您的理想体重是: ",desc:r+"公斤"},{done:!1,current:!1,text:"您的体质指数: ",desc:n},{done:!1,current:!1,text:"体质指数: ",desc:"(18.5～23.9为正常范围)"}]}e.exports={HealthMsg:function(e,t,o){var i,s,a="";parseFloat(t)<=0||parseFloat(t)>=250||parseFloat(e)<=0||parseFloat(e)>=250?a=[{current:!1,done:!1,text:"身高或体重超过计算范围了！",desc:""}]:(i=(i=n(e,t/100)).toFixed(1),i=parseFloat(i),s="M"==o?Math.round(50+2.3*(t-152)/2.54):Math.round(45.5+2.3*(t-152)/2.54),a=i>=40?r("Ⅲ度肥胖","非常严重增加",i,s):i>=30&&i<40?r("II度肥胖","严重增加",i,s):i>27&&i<=29.9?r("I度肥胖","中度增加",i,s):i>=24?r("肥胖前期","增加",i,s):i>=18.5&&i<=23.9?r("正常范围","平均水平",i,s):r("体重过低","低，但其它疾病危险性增加",i,s));return a}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,